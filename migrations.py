"""
–°–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telegram Bot
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ö–µ–º—É –ë–î –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ
"""

import asyncio
import asyncpg
import os
import sys
from datetime import datetime
from typing import List, Dict, Any, Optional
import logging
from pathlib import Path
import hashlib

logger = logging.getLogger(__name__)

class Migration:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, version: str, description: str):
        self.version = version
        self.description = description
        self.timestamp = datetime.now()
    
    async def up(self, connection: asyncpg.Connection):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        raise NotImplementedError("–ú–µ—Ç–æ–¥ up –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
    
    async def down(self, connection: asyncpg.Connection):
        """–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        raise NotImplementedError("–ú–µ—Ç–æ–¥ down –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
    
    def get_checksum(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É –º–∏–≥—Ä–∞—Ü–∏–∏"""
        content = f"{self.version}{self.description}"
        return hashlib.md5(content.encode()).hexdigest()

class MigrationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–π"""
    
    def __init__(self, connection_string: str):
        self.connection_string = connection_string
        self.migrations: List[Migration] = []
    
    def add_migration(self, migration: Migration):
        """–î–æ–±–∞–≤–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        self.migrations.append(migration)
    
    async def init_migration_table(self, connection: asyncpg.Connection):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –º–∏–≥—Ä–∞—Ü–∏–π"""
        await connection.execute("""
            CREATE TABLE IF NOT EXISTS schema_migrations (
                version VARCHAR(255) PRIMARY KEY,
                description TEXT NOT NULL,
                checksum VARCHAR(32) NOT NULL,
                applied_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        """)
    
    async def get_applied_migrations(self, connection: asyncpg.Connection) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
        rows = await connection.fetch(
            "SELECT version FROM schema_migrations ORDER BY version"
        )
        return [row['version'] for row in rows]
    
    async def apply_migration(self, connection: asyncpg.Connection, migration: Migration):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–¥–Ω—É –º–∏–≥—Ä–∞—Ü–∏—é"""
        logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ {migration.version}: {migration.description}")
        
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            async with connection.transaction():
                await migration.up(connection)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
                await connection.execute(
                    """INSERT INTO schema_migrations (version, description, checksum) 
                       VALUES ($1, $2, $3)""",
                    migration.version, migration.description, migration.get_checksum()
                )
            
            logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {migration.version} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ {migration.version}: {e}")
            raise
    
    async def rollback_migration(self, connection: asyncpg.Connection, migration: Migration):
        """–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é"""
        logger.info(f"–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ {migration.version}: {migration.description}")
        
        try:
            async with connection.transaction():
                await migration.down(connection)
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –º–∏–≥—Ä–∞—Ü–∏–π
                await connection.execute(
                    "DELETE FROM schema_migrations WHERE version = $1",
                    migration.version
                )
            
            logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {migration.version} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞—á–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ {migration.version}: {e}")
            raise
    
    async def migrate(self):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –Ω–µ–ø—Ä–∏–º–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        connection = await asyncpg.connect(self.connection_string)
        
        try:
            await self.init_migration_table(connection)
            applied = await self.get_applied_migrations(connection)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ –≤–µ—Ä—Å–∏–∏
            self.migrations.sort(key=lambda m: m.version)
            
            for migration in self.migrations:
                if migration.version not in applied:
                    await self.apply_migration(connection, migration)
                else:
                    logger.debug(f"–ú–∏–≥—Ä–∞—Ü–∏—è {migration.version} —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
            
            logger.info("üéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            
        finally:
            await connection.close()
    
    async def rollback(self, target_version: Optional[str] = None):
        """–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
        connection = await asyncpg.connect(self.connection_string)
        
        try:
            applied = await self.get_applied_migrations(connection)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –æ—Ç–∫–∞—Ç–∞
            self.migrations.sort(key=lambda m: m.version, reverse=True)
            
            for migration in self.migrations:
                if migration.version in applied:
                    await self.rollback_migration(connection, migration)
                    
                    if target_version and migration.version == target_version:
                        break
            
            logger.info("üéâ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        finally:
            await connection.close()
    
    async def status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π"""
        connection = await asyncpg.connect(self.connection_string)
        
        try:
            await self.init_migration_table(connection)
            applied = await self.get_applied_migrations(connection)
            
            print("üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:")
            print("=" * 80)
            
            self.migrations.sort(key=lambda m: m.version)
            
            for migration in self.migrations:
                status = "‚úÖ APPLIED" if migration.version in applied else "‚è≥ PENDING"
                print(f"{migration.version:15} | {status:10} | {migration.description}")
            
            print("=" * 80)
            print(f"–í—Å–µ–≥–æ –º–∏–≥—Ä–∞—Ü–∏–π: {len(self.migrations)}")
            print(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–æ: {len(applied)}")
            print(f"–û–∂–∏–¥–∞–µ—Ç: {len(self.migrations) - len(applied)}")
            
        finally:
            await connection.close()

# ==================== –ö–û–ù–ö–†–ï–¢–ù–´–ï –ú–ò–ì–†–ê–¶–ò–ò ====================

class Migration001_InitialSchema(Migration):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã"""
    
    def __init__(self):
        super().__init__("001", "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    async def up(self, connection: asyncpg.Connection):
        # –í–∫–ª—é—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        await connection.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp"')
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        await connection.execute("""
            CREATE TABLE IF NOT EXISTS user_ads (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                message_id BIGINT NOT NULL UNIQUE,
                message_url TEXT NOT NULL,
                topic_name TEXT NOT NULL,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await connection.execute("""
            CREATE TABLE IF NOT EXISTS banned_users (
                user_id BIGINT PRIMARY KEY,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ª–∏–º–∏—Ç–æ–≤
        await connection.execute("""
            CREATE TABLE IF NOT EXISTS user_limits (
                user_id BIGINT PRIMARY KEY,
                ad_limit INTEGER NOT NULL DEFAULT 4,
                updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        await connection.execute("CREATE INDEX IF NOT EXISTS idx_user_ads_user_id ON user_ads(user_id)")
        await connection.execute("CREATE INDEX IF NOT EXISTS idx_user_ads_message_id ON user_ads(message_id)")
        await connection.execute("CREATE INDEX IF NOT EXISTS idx_user_ads_created_at ON user_ads(created_at DESC)")
    
    async def down(self, connection: asyncpg.Connection):
        await connection.execute("DROP TABLE IF EXISTS user_limits")
        await connection.execute("DROP TABLE IF EXISTS banned_users") 
        await connection.execute("DROP TABLE IF EXISTS user_ads")

class Migration002_AddModerationLogs(Migration):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        super().__init__("002", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–æ–≥–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
    
    async def up(self, connection: asyncpg.Connection):
        await connection.execute("""
            CREATE TABLE IF NOT EXISTS moderation_logs (
                id SERIAL PRIMARY KEY,
                target_user_id BIGINT NOT NULL,
                moderator_id BIGINT NOT NULL,
                action_type VARCHAR(50) NOT NULL,
                action_details JSONB,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        await connection.execute("CREATE INDEX IF NOT EXISTS idx_moderation_logs_target_user ON moderation_logs(target_user_id)")
        await connection.execute("CREATE INDEX IF NOT EXISTS idx_moderation_logs_action_type ON moderation_logs(action_type)")
        await connection.execute("CREATE INDEX IF NOT EXISTS idx_moderation_logs_created_at ON moderation_logs(created_at DESC)")
    
    async def down(self, connection: asyncpg.Connection):
        await connection.execute("DROP TABLE IF EXISTS moderation_logs")

class Migration003_AddStatistics(Migration):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    def __init__(self):
        super().__init__("003", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞")
    
    async def up(self, connection: asyncpg.Connection):
        await connection.execute("""
            CREATE TABLE IF NOT EXISTS bot_stats (
                id SERIAL PRIMARY KEY,
                date DATE NOT NULL DEFAULT CURRENT_DATE,
                total_users INTEGER DEFAULT 0,
                total_ads INTEGER DEFAULT 0,
                new_users INTEGER DEFAULT 0,
                new_ads INTEGER DEFAULT 0,
                deleted_ads INTEGER DEFAULT 0,
                banned_users INTEGER DEFAULT 0,
                UNIQUE(date)
            )
        """)
        
        await connection.execute("CREATE INDEX IF NOT EXISTS idx_bot_stats_date ON bot_stats(date DESC)")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await connection.execute("""
            CREATE OR REPLACE FUNCTION update_daily_stats()
            RETURNS VOID AS $$
            DECLARE
                today DATE := CURRENT_DATE;
                total_users_count INTEGER;
                total_ads_count INTEGER;
                new_users_count INTEGER;
                new_ads_count INTEGER;
                banned_users_count INTEGER;
            BEGIN
                SELECT COUNT(DISTINCT user_id) INTO total_users_count FROM user_ads;
                SELECT COUNT(*) INTO total_ads_count FROM user_ads;
                SELECT COUNT(DISTINCT user_id) INTO new_users_count 
                    FROM user_ads WHERE DATE(created_at) = today;
                SELECT COUNT(*) INTO new_ads_count 
                    FROM user_ads WHERE DATE(created_at) = today;
                SELECT COUNT(*) INTO banned_users_count FROM banned_users;
                
                INSERT INTO bot_stats (
                    date, total_users, total_ads, new_users, 
                    new_ads, banned_users
                ) VALUES (
                    today, total_users_count, total_ads_count, new_users_count,
                    new_ads_count, banned_users_count
                ) ON CONFLICT (date) DO UPDATE SET
                    total_users = EXCLUDED.total_users,
                    total_ads = EXCLUDED.total_ads,
                    new_users = EXCLUDED.new_users,
                    new_ads = EXCLUDED.new_ads,
                    banned_users = EXCLUDED.banned_users;
            END;
            $$ LANGUAGE plpgsql;
        """)
    
    async def down(self, connection: asyncpg.Connection):
        await connection.execute("DROP FUNCTION IF EXISTS update_daily_stats()")
        await connection.execute("DROP TABLE IF EXISTS bot_stats")

class Migration004_AddUpdatedAtColumns(Migration):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ updated_at"""
    
    def __init__(self):
        super().__init__("004", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ updated_at –∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    async def up(self, connection: asyncpg.Connection):
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É updated_at –∫ user_ads
        await connection.execute("""
            ALTER TABLE user_ads 
            ADD COLUMN IF NOT EXISTS updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
        """)
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
        await connection.execute("""
            CREATE OR REPLACE FUNCTION update_updated_at_column()
            RETURNS TRIGGER AS $$
            BEGIN
                NEW.updated_at = CURRENT_TIMESTAMP;
                RETURN NEW;
            END;
            $$ language 'plpgsql';
        """)
        
        # –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è user_ads
        await connection.execute("""
            DROP TRIGGER IF EXISTS update_user_ads_updated_at ON user_ads;
            CREATE TRIGGER update_user_ads_updated_at 
                BEFORE UPDATE ON user_ads 
                FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
        """)
        
        # –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è user_limits
        await connection.execute("""
            DROP TRIGGER IF EXISTS update_user_limits_updated_at ON user_limits;
            CREATE TRIGGER update_user_limits_updated_at 
                BEFORE UPDATE ON user_limits 
                FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
        """)
    
    async def down(self, connection: asyncpg.Connection):
        await connection.execute("DROP TRIGGER IF EXISTS update_user_ads_updated_at ON user_ads")
        await connection.execute("DROP TRIGGER IF EXISTS update_user_limits_updated_at ON user_limits")
        await connection.execute("DROP FUNCTION IF EXISTS update_updated_at_column()")
        await connection.execute("ALTER TABLE user_ads DROP COLUMN IF EXISTS updated_at")

class Migration005_AddCleanupFunction(Migration):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        super().__init__("005", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    async def up(self, connection: asyncpg.Connection):
        await connection.execute("""
            CREATE OR REPLACE FUNCTION cleanup_old_data(days_to_keep INTEGER DEFAULT 90)
            RETURNS VOID AS $$
            BEGIN
                -- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                DELETE FROM moderation_logs 
                WHERE created_at < CURRENT_TIMESTAMP - INTERVAL '1 day' * days_to_keep;
                
                -- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥)
                DELETE FROM bot_stats 
                WHERE date < CURRENT_DATE - INTERVAL '365 days';
                
                -- –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–±–ª–∏—Ü
                ANALYZE user_ads;
                ANALYZE banned_users;
                ANALYZE user_limits;
                ANALYZE moderation_logs;
                ANALYZE bot_stats;
            END;
            $$ LANGUAGE plpgsql;
        """)
    
    async def down(self, connection: asyncpg.Connection):
        await connection.execute("DROP FUNCTION IF EXISTS cleanup_old_data(INTEGER)")

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–ò–ì–†–ê–¶–ò–ô ====================

def create_migration_manager(connection_string: str) -> MigrationManager:
    """–°–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–π —Å–æ –≤—Å–µ–º–∏ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏"""
    manager = MigrationManager(connection_string)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–µ—Ä—Å–∏–π
    manager.add_migration(Migration001_InitialSchema())
    manager.add_migration(Migration002_AddModerationLogs())
    manager.add_migration(Migration003_AddStatistics())
    manager.add_migration(Migration004_AddUpdatedAtColumns())
    manager.add_migration(Migration005_AddCleanupFunction())
    
    return manager

# ==================== CLI –ò–ù–¢–ï–†–§–ï–ô–° ====================

async def main():
    """CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python migrations.py <command> [args]")
        print("–ö–æ–º–∞–Ω–¥—ã:")
        print("  migrate    - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏")
        print("  rollback   - –û—Ç–∫–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–≥—Ä–∞—Ü–∏—é")
        print("  rollback <version> - –û—Ç–∫–∞—Ç–∏—Ç—å –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏")
        print("  status     - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π")
        return
    
    command = sys.argv[1]
    database_url = os.getenv("DATABASE_URL")
    
    if not database_url:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return
    
    manager = create_migration_manager(database_url)
    
    try:
        if command == "migrate":
            await manager.migrate()
        elif command == "rollback":
            target_version = sys.argv[2] if len(sys.argv) > 2 else None
            await manager.rollback(target_version)
        elif command == "status":
            await manager.status()
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
