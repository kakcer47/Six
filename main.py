import os
import asyncio
import logging
from pyrogram import Client, filters
from pyrogram.types import Message, ChatPermissions
from pyrogram.errors import (
    ChatAdminRequired, 
    UserAdminInvalid, 
    FloodWait,
    PeerIdInvalid
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_ID = int(os.getenv('API_ID'))
API_HASH = os.getenv('API_HASH')
PHONE = os.getenv('PHONE_NUMBER')
TARGET_CHAT_ID = int(os.getenv('TARGET_CHAT_ID'))

# –ö–ª–∏–µ–Ω—Ç
app = Client("user_account", api_id=API_ID, api_hash=API_HASH, phone_number=PHONE)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤
restricted = ChatPermissions(can_send_messages=False)
unrestricted = ChatPermissions(
    can_send_messages=True,
    can_send_media_messages=True,
    can_send_polls=True,
    can_send_other_messages=True,
    can_add_web_page_previews=True,
    can_invite_users=True
)

processing_lock = asyncio.Lock()

async def count_user_messages_fast(chat_id: int, user_id: int) -> int:
    """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        count = 0
        logger.info(f"üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async for message in app.search_messages(chat_id, from_user=user_id):
            count += 1
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
            if count % 100 == 0:
                logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        logger.info(f"‚úÖ –ò—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {count}")
        return count
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {user_id}: {e}")
        return 0

async def restrict_user(chat_id: int, user_id: int) -> bool:
    """–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await app.restrict_chat_member(chat_id, user_id, restricted)
        logger.info(f"üö´ –û–≥—Ä–∞–Ω–∏—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
        return True
    except ChatAdminRequired:
        logger.error(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ {chat_id}")
        return False
    except UserAdminInvalid:
        logger.warning(f"‚ö†Ô∏è –ù–µ–ª—å–∑—è –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id}")
        return False
    except FloodWait as e:
        logger.warning(f"‚è≥ FloodWait: –∂–¥–µ–º {e.value} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(e.value)
        return await restrict_user(chat_id, user_id)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

async def unrestrict_user(chat_id: int, user_id: int) -> bool:
    """–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–∏—Å–∞—Ç—å"""
    try:
        await app.restrict_chat_member(chat_id, user_id, unrestricted)
        logger.info(f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–æ –ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return True
    except ChatAdminRequired:
        logger.error(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ {chat_id}")
        return False
    except FloodWait as e:
        logger.warning(f"‚è≥ FloodWait: –∂–¥–µ–º {e.value} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(e.value)
        return await unrestrict_user(chat_id, user_id)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

@app.on_message(filters.chat(TARGET_CHAT_ID) & ~filters.service)
async def handle_new_message(client: Client, message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    async with processing_lock:
        try:
            # –ë—ã—Å—Ç—Ä–æ —Å—á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            count = await count_user_messages_fast(chat_id, user_id)
            
            username = message.from_user.username or message.from_user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            logger.info(f"üìù {username} (ID: {user_id}) –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {count}")
            
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π >= 4, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º (–¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è)
            if count >= 4:
                success = await restrict_user(chat_id, user_id)
                if success:
                    logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è ({count} —Å–æ–æ–±—â–µ–Ω–∏–π)")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@app.on_deleted_messages()
async def handle_deleted_messages(client: Client, messages):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¢–û–õ–¨–ö–û —É–¥–∞–ª–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π"""
    async with processing_lock:
        processed_users = set()
        
        for message in messages:
            if not message.from_user or not message.chat:
                continue
                
            user_id = message.from_user.id
            chat_id = message.chat.id
            
            # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ü–µ–ª–µ–≤–æ–º —á–∞—Ç–µ –∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if chat_id != TARGET_CHAT_ID or user_id in processed_users:
                continue
                
            processed_users.add(user_id)
            
            try:
                # –ë—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                count = await count_user_messages_fast(chat_id, user_id)
                
                username = message.from_user.username or message.from_user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {username} (ID: {user_id}). –û—Å—Ç–∞–ª–æ—Å—å: {count}")
                
                # –ï—Å–ª–∏ —Å—Ç–∞–ª–æ < 4, —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–∏—Å–∞—Ç—å (—É–±–∏—Ä–∞–µ–º –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π)
                if count < 4:
                    success = await unrestrict_user(chat_id, user_id)
                    if success:
                        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–±—Ä–∞–Ω –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π ({count} —Å–æ–æ–±—â–µ–Ω–∏–π)")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è {user_id}: {e}")

@app.on_message(filters.command("check") & filters.chat(TARGET_CHAT_ID) & filters.me)
async def check_user_command(client: Client, message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.reply_to_message and message.reply_to_message.from_user:
        user = message.reply_to_message.from_user
        count = await count_user_messages_fast(message.chat.id, user.id)
        
        status = "üö´ –í –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö" if count >= 4 else "‚úÖ –ú–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å"
        
        await message.edit(
            f"üë§ **{user.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}** (@{user.username or '–Ω–µ—Ç'})\n"
            f"üÜî ID: `{user.id}`\n"
            f"üìä –°–æ–æ–±—â–µ–Ω–∏–π: **{count}**\n"
            f"üéØ –°—Ç–∞—Ç—É—Å: {status}"
        )
    else:
        await message.edit("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

@app.on_message(filters.command("stats") & filters.chat(TARGET_CHAT_ID) & filters.me)
async def stats_command(client: Client, message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    try:
        chat = await app.get_chat(TARGET_CHAT_ID)
        me = await app.get_me()
        member = await app.get_chat_member(TARGET_CHAT_ID, me.id)
        admin_status = "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if member.status in ["administrator", "creator"] else "‚ùå –ù–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        
        await message.edit(
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
            f"üè† –ß–∞—Ç: {chat.title}\n"
            f"üëë –°—Ç–∞—Ç—É—Å: {admin_status}\n"
            f"üéØ –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: 4\n"
            f"‚ö° –†–µ–∂–∏–º: –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            f"üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è + –£–¥–∞–ª–µ–Ω–∏—è"
        )
    except Exception as e:
        await message.edit(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    try:
        async with app:
            me = await app.get_me()
            logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç
            try:
                chat = await app.get_chat(TARGET_CHAT_ID)
                logger.info(f"üéØ –¶–µ–ª–µ–≤–æ–π —á–∞—Ç: {chat.title} (ID: {TARGET_CHAT_ID})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
                member = await app.get_chat_member(TARGET_CHAT_ID, me.id)
                if member.status in ["administrator", "creator"]:
                    logger.info("‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Ç–∞: {e}")
                return
            
            logger.info("üéØ –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:")
            logger.info("  üìù –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É ‚Üí –ï—Å–ª–∏ ‚â•4 —Ç–æ –±–ª–æ–∫")
            logger.info("  üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ ‚Üí –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É ‚Üí –ï—Å–ª–∏ <4 —Ç–æ —Ä–∞–∑–±–ª–æ–∫")
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            await app.idle()
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
