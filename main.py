import asyncio
import logging
import os
import sqlite3
import aiosqlite
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, 
    InlineKeyboardButton, BotCommand
)
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
TARGET_CHAT_ID = int(os.getenv("TARGET_CHAT_ID", "-1002827106973"))  # ID —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
EXAMPLE_URL = "https://example.com"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ—é —Å—Å—ã–ª–∫—É

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class AdStates(StatesGroup):
    choosing_language = State()
    main_menu = State()
    choosing_topic = State() 
    topic_selected = State()
    writing_ad = State()
    my_ads = State()

# –¢–µ–º—ã –≥—Ä—É–ø–ø—ã - –ù–ê–°–¢–†–û–ô–¢–ï –ü–û–î –°–í–û–Æ –ì–†–£–ü–ü–£
TOPICS = {
    "topic_1": {"name": "üíº –†–∞–±–æ—Ç–∞", "id": 27},
    "topic_2": {"name": "üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "id": 28},
    "topic_3": {"name": "üöó –ê–≤—Ç–æ", "id": 29},
    "topic_4": {"name": "üõçÔ∏è –¢–æ–≤–∞—Ä—ã", "id": 30},
    "topic_5": {"name": "üí° –£—Å–ª—É–≥–∏", "id": 31},
    "topic_6": {"name": "üìö –û–±—É—á–µ–Ω–∏–µ", "id": 32},
}

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite –≤ –ø–∞–º—è—Ç–∏"""
    async with aiosqlite.connect(":memory:") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS user_ads (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                message_id INTEGER NOT NULL,
                message_url TEXT NOT NULL,
                topic_name TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        await db.commit()
        return db

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ë–î
db_connection = None

async def add_user_ad(user_id: int, message_id: int, message_url: str, topic_name: str):
    """–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    global db_connection
    if db_connection:
        await db_connection.execute(
            "INSERT INTO user_ads (user_id, message_id, message_url, topic_name) VALUES (?, ?, ?, ?)",
            (user_id, message_id, message_url, topic_name)
        )
        await db_connection.commit()

async def get_user_ads(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global db_connection
    if db_connection:
        async with db_connection.execute(
            "SELECT message_id, message_url, topic_name FROM user_ads WHERE user_id = ? ORDER BY created_at DESC",
            (user_id,)
        ) as cursor:
            return await cursor.fetchall()
    return []

async def get_ad_by_message_id(message_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ message_id"""
    global db_connection
    if db_connection:
        async with db_connection.execute(
            "SELECT user_id, message_id, message_url, topic_name FROM user_ads WHERE message_id = ?",
            (message_id,)
        ) as cursor:
            return await cursor.fetchone()
    return None

async def delete_user_ad(message_id: int):
    """–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –ë–î"""
    global db_connection
    if db_connection:
        await db_connection.execute(
            "DELETE FROM user_ads WHERE message_id = ?",
            (message_id,)
        )
        await db_connection.commit()

def get_ad_actions_keyboard(message_id: int, message_url: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_ad_{message_id}"),
            InlineKeyboardButton(text="üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", url=message_url)
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_my_ads")]
    ])
    return keyboard

def get_language_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
            InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")
        ]
    ])
    return keyboard

def get_main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="create_ad"),
            InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="my_ads")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_language")]
    ])
    return keyboard

def get_topics_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º (–ø–æ 2 –Ω–∞ –ª–∏–Ω–∏—é)"""
    buttons = []
    topic_items = list(TOPICS.items())
    
    for i in range(0, len(topic_items), 2):
        row = []
        # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É
        topic_key, topic_data = topic_items[i]
        row.append(InlineKeyboardButton(
            text=topic_data["name"], 
            callback_data=topic_key
        ))
        
        # –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if i + 1 < len(topic_items):
            topic_key2, topic_data2 = topic_items[i + 1]
            row.append(InlineKeyboardButton(
                text=topic_data2["name"], 
                callback_data=topic_key2
            ))
        
        buttons.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def get_topic_actions_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–µ–º–æ–π"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìñ –ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è", url=EXAMPLE_URL)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_topics")]
    ])
    return keyboard

def get_post_actions_keyboard(user_id: int, message_url: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="create_new"),
            InlineKeyboardButton(text="üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", url=message_url)
        ]
    ])
    return keyboard

def get_contact_keyboard(user_id: int, username: str = None):
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–≤—Ç–æ—Ä–æ–º"""
    if username:
        url = f"https://t.me/{username}"
    else:
        url = f"tg://user?id={user_id}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å", url=url)]
    ])
    return keyboard

async def get_my_ads_keyboard(user_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    ads = await get_user_ads(user_id)
    buttons = []
    
    for i, (message_id, message_url, topic_name) in enumerate(ads, 1):
        buttons.append([
            InlineKeyboardButton(
                text=f"üìÑ –û–±—ä—è–≤–ª–µ–Ω–∏–µ {i}", 
                callback_data=f"view_ad_{message_id}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

@dp.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:",
        reply_markup=get_language_keyboard()
    )
    await state.set_state(AdStates.choosing_language)

@dp.callback_query(F.data == "lang_ru", StateFilter(AdStates.choosing_language))
async def language_ru_handler(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )
    await state.set_state(AdStates.main_menu)
    await callback.answer()

@dp.callback_query(F.data == "lang_en", StateFilter(AdStates.choosing_language))
async def language_en_handler(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await callback.answer("üöß English version coming soon!", show_alert=True)

@dp.callback_query(F.data == "create_ad", StateFilter(AdStates.main_menu))
async def create_ad_handler(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "üìù –í –∫–∞–∫—É—é —Ç–µ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å?",
        reply_markup=get_topics_keyboard()
    )
    await state.set_state(AdStates.choosing_topic)
    await callback.answer()

@dp.callback_query(F.data == "my_ads", StateFilter(AdStates.main_menu))
async def my_ads_handler(callback: CallbackQuery, state: FSMContext):
    """–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    ads = await get_user_ads(user_id)
    
    if not ads:
        await callback.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π", show_alert=True)
        return
    
    keyboard = await get_my_ads_keyboard(user_id)
    await callback.message.edit_text(
        f"üìã –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ({len(ads)}):",
        reply_markup=keyboard
    )
    await state.set_state(AdStates.my_ads)
    await callback.answer()

@dp.callback_query(F.data == "back_to_language")
async def back_to_language_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞"""
    try:
        await callback.message.edit_text(
            "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:",
            reply_markup=get_language_keyboard()
        )
        await state.set_state(AdStates.choosing_language)
        await callback.answer()
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —è–∑—ã–∫—É: {e}")
        try:
            await callback.answer()
        except:
            pass

@dp.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await callback.message.edit_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
        await state.set_state(AdStates.main_menu)
        await callback.answer()
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        try:
            await callback.answer()
        except:
            pass

@dp.callback_query(F.data == "back_to_topics")
async def back_to_topics_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º"""
    await callback.message.edit_text(
        "üìù –í –∫–∞–∫—É—é —Ç–µ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å?",
        reply_markup=get_topics_keyboard()
    )
    await state.set_state(AdStates.choosing_topic)
    await callback.answer()

@dp.callback_query(F.data == "back_to_my_ads")
async def back_to_my_ads_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–æ–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º"""
    try:
        user_id = callback.from_user.id
        ads = await get_user_ads(user_id)
        
        if not ads:
            await callback.message.edit_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_menu_keyboard()
            )
            await state.set_state(AdStates.main_menu)
        else:
            keyboard = await get_my_ads_keyboard(user_id)
            await callback.message.edit_text(
                f"üìã –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ({len(ads)}):",
                reply_markup=keyboard
            )
            await state.set_state(AdStates.my_ads)
        await callback.answer()
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º: {e}")
        try:
            await callback.answer()
        except:
            pass

@dp.callback_query(StateFilter(AdStates.choosing_topic))
async def topic_handler(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–µ–º—ã"""
    topic_key = callback.data
    
    if topic_key in TOPICS:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
        await state.update_data(selected_topic=topic_key)
        
        topic_name = TOPICS[topic_key]["name"]
        await callback.message.edit_text(
            f"‚úçÔ∏è –¢–µ–º–∞: {topic_name}\n\n–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:",
            reply_markup=get_topic_actions_keyboard()
        )
        await state.set_state(AdStates.writing_ad)
    
    await callback.answer()

@dp.message(StateFilter(AdStates.writing_ad))
async def ad_text_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    user_data_state = await state.get_data()
    selected_topic = user_data_state.get("selected_topic")
    
    if not selected_topic or selected_topic not in TOPICS:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
    topic_data = TOPICS[selected_topic]
    topic_id = topic_data["id"]
    topic_name = topic_data["name"]
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    ad_text = message.text or message.caption or ""
    if not ad_text:
        await message.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = ad_text.split('\n')
    if lines:
        # –ü–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ü–∏—Ç–∞—Ç—É
        formatted_text = f"<blockquote>{lines[0]}</blockquote>"
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –µ—Å—Ç—å
        if len(lines) > 1:
            formatted_text += "\n" + "\n".join(lines[1:])
    else:
        formatted_text = f"<blockquote>{ad_text}</blockquote>"
    
    try:
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –≥—Ä—É–ø–ø—É
        sent_message = await bot.send_message(
            chat_id=TARGET_CHAT_ID,
            text=formatted_text,
            message_thread_id=topic_id,
            parse_mode="HTML",
            reply_markup=get_contact_keyboard(
                message.from_user.id, 
                message.from_user.username
            )
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_url = f"https://t.me/c/{str(TARGET_CHAT_ID)[4:]}/{sent_message.message_id}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await add_user_ad(
            message.from_user.id, 
            sent_message.message_id, 
            message_url, 
            topic_name
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
        await message.answer(
            "‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!",
            reply_markup=get_post_actions_keyboard(message.from_user.id, message_url)
        )
        
        logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}, —Ç–µ–º–∞ {selected_topic}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        if "not enough rights" in str(e):
            error_msg = ("‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É.\n\n"
                        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        elif "chat not found" in str(e):
            error_msg = "‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        elif "thread not found" in str(e):
            error_msg = f"‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ '{topic_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ."
        else:
            error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        await message.answer(error_msg)
    
    await state.clear()

@dp.callback_query(F.data == "create_new")
async def create_new_handler(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "üìù –í –∫–∞–∫—É—é —Ç–µ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å?",
        reply_markup=get_topics_keyboard()
    )
    await state.set_state(AdStates.choosing_topic)
    await callback.answer()

@dp.callback_query(F.data.startswith("view_ad_"))
async def view_ad_handler(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ–π—Å—Ç–≤–∏–π —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º"""
    message_id = int(callback.data.split("_")[-1])
    ad_data = await get_ad_by_message_id(message_id)
    
    if not ad_data:
        await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    user_id, message_id, message_url, topic_name = ad_data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if user_id != callback.from_user.id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"üìÑ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ–º–µ: {topic_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_ad_actions_keyboard(message_id, message_url)
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_ad_"))
async def delete_ad_handler(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    message_id = int(callback.data.split("_")[-1])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{message_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_ad_{message_id}")
        ]
    ])
    
    await callback.answer("‚ö†Ô∏è –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?", show_alert=True)
    
    await callback.message.edit_text(
        "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    try:
        message_id = int(callback.data.split("_")[-1])
        ad_data = await get_ad_by_message_id(message_id)
        
        if not ad_data:
            await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        user_id, message_id, message_url, topic_name = ad_data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if user_id != callback.from_user.id:
            await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", show_alert=True)
            return
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞
            await bot.delete_message(chat_id=TARGET_CHAT_ID, message_id=message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ —á–∞—Ç–∞: {e}")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        await delete_user_ad(message_id)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        ads = await get_user_ads(callback.from_user.id)
        
        if not ads:
            await callback.message.edit_text(
                "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!\n\n–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        else:
            keyboard = await get_my_ads_keyboard(callback.from_user.id)
            await callback.message.edit_text(
                f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!\n\nüìã –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ({len(ads)}):",
                reply_markup=keyboard
            )
        
        await callback.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
        try:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
        except:
            pass

async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    ]
    await bot.set_my_commands(commands)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global db_connection
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    db_connection = await aiosqlite.connect(":memory:")
    await db_connection.execute("""
        CREATE TABLE IF NOT EXISTS user_ads (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            message_id INTEGER NOT NULL,
            message_url TEXT NOT NULL,
            topic_name TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    await db_connection.commit()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    await set_bot_commands()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        if db_connection:
            await db_connection.close()

if __name__ == "__main__":
    asyncio.run(main())
