import asyncio
import logging
import os
import asyncpg
from aiohttp import web, ClientSession
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, 
    InlineKeyboardButton, BotCommand
)
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")  # PostgreSQL URL
TARGET_CHAT_ID = int(os.getenv("TARGET_CHAT_ID", "-1002827106973"))  # ID —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
MODERATION_CHAT_ID = int(os.getenv("MODERATION_CHAT_ID", "0"))  # ID –≥—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
GROUP_LINK = os.getenv("GROUP_LINK", "https://t.me/your_group")  # –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É
EXAMPLE_URL = os.getenv("EXAMPLE_URL", "https://example.com")  # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–º–µ—Ä
PORT = int(os.getenv("PORT", 8080))  # –ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class AdStates(StatesGroup):
    choosing_language = State()
    main_menu = State()
    choosing_topic = State() 
    topic_selected = State()
    writing_ad = State()
    my_ads = State()

# –¢–µ–º—ã –≥—Ä—É–ø–ø—ã - –ù–ê–°–¢–†–û–ô–¢–ï –ü–û–î –°–í–û–Æ –ì–†–£–ü–ü–£
TOPICS = {
    "topic_1": {"name": "üíº –†–∞–±–æ—Ç–∞", "id": 27},
    "topic_2": {"name": "üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "id": 28},
    "topic_3": {"name": "üöó –ê–≤—Ç–æ", "id": 29},
    "topic_4": {"name": "üõçÔ∏è –¢–æ–≤–∞—Ä—ã", "id": 30},
    "topic_5": {"name": "üí° –£—Å–ª—É–≥–∏", "id": 31},
    "topic_6": {"name": "üìö –û–±—É—á–µ–Ω–∏–µ", "id": 32},
}

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
db_pool = None

# –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Render
app = web.Application()

async def health_check(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return web.Response(text="Bot is running!")

async def ping_self():
    """–ê–≤—Ç–æ–ø–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è"""
    url = f"https://six-o46c.onrender.com"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
    try:
        async with ClientSession() as session:
            async with session.get(url) as response:
                logger.info(f"Self ping: {response.status}")
    except Exception as e:
        logger.warning(f"Self ping failed: {e}")

async def start_ping_task():
    """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–ø–∏–Ω–≥–∞ –∫–∞–∂–¥—ã–µ 14 –º–∏–Ω—É—Ç"""
    while True:
        await asyncio.sleep(840)  # 14 –º–∏–Ω—É—Ç
        await ping_self()

async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""
    global db_pool
    
    if not DATABASE_URL:
        raise ValueError("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        db_pool = await asyncpg.create_pool(DATABASE_URL)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        async with db_pool.acquire() as connection:
            # –¢–∞–±–ª–∏—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await connection.execute("""
                CREATE TABLE IF NOT EXISTS user_ads (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    message_id BIGINT NOT NULL,
                    message_url TEXT NOT NULL,
                    topic_name TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await connection.execute("""
                CREATE TABLE IF NOT EXISTS banned_users (
                    user_id BIGINT PRIMARY KEY
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await connection.execute("""
                CREATE TABLE IF NOT EXISTS user_limits (
                    user_id BIGINT PRIMARY KEY,
                    ad_limit INTEGER NOT NULL DEFAULT 4
                )
            """)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            await connection.execute("""
                CREATE INDEX IF NOT EXISTS idx_user_ads_user_id ON user_ads(user_id)
            """)
            await connection.execute("""
                CREATE INDEX IF NOT EXISTS idx_user_ads_message_id ON user_ads(message_id)
            """)
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise

async def add_user_ad(user_id: int, message_id: int, message_url: str, topic_name: str):
    """–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    try:
        async with db_pool.acquire() as connection:
            await connection.execute(
                "INSERT INTO user_ads (user_id, message_id, message_url, topic_name) VALUES ($1, $2, $3, $4)",
                user_id, message_id, message_url, topic_name
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")

async def get_user_ads(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with db_pool.acquire() as connection:
            rows = await connection.fetch(
                "SELECT message_id, message_url, topic_name FROM user_ads WHERE user_id = $1 ORDER BY created_at DESC",
                user_id
            )
            return [(row['message_id'], row['message_url'], row['topic_name']) for row in rows]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
        return []

async def get_ad_by_message_id(message_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ message_id"""
    try:
        async with db_pool.acquire() as connection:
            row = await connection.fetchrow(
                "SELECT user_id, message_id, message_url, topic_name FROM user_ads WHERE message_id = $1",
                message_id
            )
            if row:
                return (row['user_id'], row['message_id'], row['message_url'], row['topic_name'])
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
        return None

async def delete_user_ad(message_id: int):
    """–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –ë–î"""
    try:
        async with db_pool.acquire() as connection:
            await connection.execute(
                "DELETE FROM user_ads WHERE message_id = $1",
                message_id
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")

async def delete_all_user_ads(user_id: int):
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with db_pool.acquire() as connection:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
            rows = await connection.fetch(
                "SELECT message_id FROM user_ads WHERE user_id = $1",
                user_id
            )
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —á–∞—Ç–∞
            deleted_count = 0
            for row in rows:
                message_id = row['message_id']
                try:
                    await bot.delete_message(chat_id=TARGET_CHAT_ID, message_id=message_id)
                    deleted_count += 1
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
            await connection.execute(
                "DELETE FROM user_ads WHERE user_id = $1",
                user_id
            )
            
            return deleted_count
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
        return 0

async def ban_user(user_id: int):
    """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with db_pool.acquire() as connection:
            await connection.execute(
                "INSERT INTO banned_users (user_id) VALUES ($1) ON CONFLICT (user_id) DO NOTHING",
                user_id
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def unban_user(user_id: int):
    """–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with db_pool.acquire() as connection:
            await connection.execute(
                "DELETE FROM banned_users WHERE user_id = $1",
                user_id
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def is_user_banned(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    try:
        async with db_pool.acquire() as connection:
            result = await connection.fetchval(
                "SELECT 1 FROM banned_users WHERE user_id = $1",
                user_id
            )
            return result is not None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞: {e}")
        return False

async def get_user_ad_count(user_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with db_pool.acquire() as connection:
            result = await connection.fetchval(
                "SELECT COUNT(*) FROM user_ads WHERE user_id = $1",
                user_id
            )
            return result if result else 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
        return 0

async def get_user_limit(user_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with db_pool.acquire() as connection:
            result = await connection.fetchval(
                "SELECT ad_limit FROM user_limits WHERE user_id = $1",
                user_id
            )
            return result if result else 4  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 4
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞: {e}")
        return 4

async def set_user_limit(user_id: int, limit: int):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with db_pool.acquire() as connection:
            await connection.execute(
                "INSERT INTO user_limits (user_id, ad_limit) VALUES ($1, $2) ON CONFLICT (user_id) DO UPDATE SET ad_limit = $2",
                user_id, limit
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞: {e}")

async def send_to_moderation(user_id: int, username: str, text: str, message_url: str, topic_name: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    if not MODERATION_CHAT_ID or MODERATION_CHAT_ID == 0:
        return
    
    try:
        username_text = f"@{username}" if username else "–ù–µ—Ç username"
        moderation_text = (
            f"üìã –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n"
            f"üë§ ID: {user_id}\n"
            f"üîó Username: {username_text}\n"
            f"üìÇ –¢–µ–º–∞: {topic_name}\n\n"
            f"üìù –¢–µ–∫—Å—Ç:\n{text}\n\n"
            f"üîó –°—Å—ã–ª–∫–∞: {message_url}"
        )
        
        await bot.send_message(
            chat_id=MODERATION_CHAT_ID,
            text=moderation_text
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")

def get_ad_actions_keyboard(message_id: int, message_url: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_ad_{message_id}"),
            InlineKeyboardButton(text="üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", url=message_url)
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_my_ads")]
    ])
    return keyboard

def get_language_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
            InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")
        ]
    ])
    return keyboard

def get_main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="create_ad"),
            InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="my_ads")
        ],
        [InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", url=GROUP_LINK)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_language")]
    ])
    return keyboard

def get_back_to_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞ –≥–ª–∞–≤–Ω—É—é'"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_main")]
    ])
    return keyboard

def get_topics_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º (–ø–æ 2 –Ω–∞ –ª–∏–Ω–∏—é)"""
    buttons = []
    topic_items = list(TOPICS.items())
    
    for i in range(0, len(topic_items), 2):
        row = []
        # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É
        topic_key, topic_data = topic_items[i]
        row.append(InlineKeyboardButton(
            text=topic_data["name"], 
            callback_data=topic_key
        ))
        
        # –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if i + 1 < len(topic_items):
            topic_key2, topic_data2 = topic_items[i + 1]
            row.append(InlineKeyboardButton(
                text=topic_data2["name"], 
                callback_data=topic_key2
            ))
        
        buttons.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def get_topic_actions_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–µ–º–æ–π"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìñ –ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è", url=EXAMPLE_URL)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_topics")]
    ])
    return keyboard

def get_post_actions_keyboard(user_id: int, message_url: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="create_new"),
            InlineKeyboardButton(text="üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", url=message_url)
        ],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="my_ads")]
    ])
    return keyboard

def get_contact_keyboard(user_id: int, username: str = None):
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–≤—Ç–æ—Ä–æ–º"""
    if username:
        url = f"https://t.me/{username}"
    else:
        url = f"tg://user?id={user_id}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å", url=url)]
    ])
    return keyboard

async def get_my_ads_keyboard(user_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    ads = await get_user_ads(user_id)
    buttons = []
    
    for i, (message_id, message_url, topic_name) in enumerate(ads, 1):
        buttons.append([
            InlineKeyboardButton(
                text=f"üìÑ –û–±—ä—è–≤–ª–µ–Ω–∏–µ {i}", 
                callback_data=f"view_ad_{message_id}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

@dp.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    if message.chat.id == TARGET_CHAT_ID:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    if await is_user_banned(message.from_user.id):
        await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.")
        return
    
    await message.answer(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:",
        reply_markup=get_language_keyboard()
    )
    await state.set_state(AdStates.choosing_language)

# –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
@dp.message(Command("ban"))
async def ban_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    if message.chat.id == TARGET_CHAT_ID:
        return
    
    # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    if not MODERATION_CHAT_ID or message.chat.id != MODERATION_CHAT_ID:
        return
    
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id>")
            return
        
        user_id = int(args[1])
        await ban_user(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("banall"))
async def banall_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –±–∞–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    if message.chat.id == TARGET_CHAT_ID:
        return
    
    # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    if not MODERATION_CHAT_ID or message.chat.id != MODERATION_CHAT_ID:
        return
    
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /banall <user_id>")
            return
        
        user_id = int(args[1])
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        deleted_count = await delete_all_user_ads(user_id)
        
        # –ë–∞–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await ban_user(user_id)
        
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω\n"
            f"üóë –£–¥–∞–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {deleted_count}"
        )
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("banoff"))
async def banoff_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    if message.chat.id == TARGET_CHAT_ID:
        return
    
    # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    if not MODERATION_CHAT_ID or message.chat.id != MODERATION_CHAT_ID:
        return
    
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /banoff <user_id>")
            return
        
        user_id = int(args[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not await is_user_banned(user_id):
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω")
            return
        
        # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await unban_user(user_id)
        
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("setlimit"))
async def setlimit_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    if message.chat.id == TARGET_CHAT_ID:
        return
    
    # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    if not MODERATION_CHAT_ID or message.chat.id != MODERATION_CHAT_ID:
        return
    
    try:
        args = message.text.split()
        if len(args) != 3:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setlimit <user_id> <limit>")
            return
        
        user_id = int(args[1])
        limit = int(args[2])
        
        if limit < 0:
            await message.answer("‚ùå –õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            return
        
        if limit > 50:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: 50 –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            return
        
        await set_user_limit(user_id, limit)
        await message.answer(f"‚úÖ –õ–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("getlimit"))
async def getlimit_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    if message.chat.id == TARGET_CHAT_ID:
        return
    
    # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    if not MODERATION_CHAT_ID or message.chat.id != MODERATION_CHAT_ID:
        return
    
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /getlimit <user_id>")
            return
        
        user_id = int(args[1])
        current_count = await get_user_ad_count(user_id)
        user_limit = await get_user_limit(user_id)
        
        await message.answer(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
            f"üìä –û–±—ä—è–≤–ª–µ–Ω–∏–π: {current_count}/{user_limit}\n"
            f"üî¢ –õ–∏–º–∏—Ç: {user_limit}"
        )
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.callback_query(F.data == "lang_ru", StateFilter(AdStates.choosing_language))
async def language_ru_handler(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    if await is_user_banned(callback.from_user.id):
        await callback.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )
    await state.set_state(AdStates.main_menu)
    await callback.answer()

@dp.callback_query(F.data == "lang_en", StateFilter(AdStates.choosing_language))
async def language_en_handler(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await callback.answer("üöß English version coming soon!", show_alert=True)

@dp.callback_query(F.data == "create_ad")
async def create_ad_handler(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    if await is_user_banned(callback.from_user.id):
        await callback.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üìù –í –∫–∞–∫—É—é —Ç–µ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å?",
        reply_markup=get_topics_keyboard()
    )
    await state.set_state(AdStates.choosing_topic)
    await callback.answer()

@dp.callback_query(F.data == "my_ads")
async def my_ads_handler(callback: CallbackQuery, state: FSMContext):
    """–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    if await is_user_banned(callback.from_user.id):
        await callback.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.", show_alert=True)
        return
    
    user_id = callback.from_user.id
    ads = await get_user_ads(user_id)
    user_limit = await get_user_limit(user_id)
    
    if not ads:
        await callback.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π", show_alert=True)
        return
    
    keyboard = await get_my_ads_keyboard(user_id)
    await callback.message.edit_text(
        f"üìã –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ({len(ads)}/{user_limit}):",
        reply_markup=keyboard
    )
    await state.set_state(AdStates.my_ads)
    await callback.answer()

@dp.callback_query(F.data == "back_to_language")
async def back_to_language_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞"""
    try:
        await callback.message.edit_text(
            "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:",
            reply_markup=get_language_keyboard()
        )
        await state.set_state(AdStates.choosing_language)
        await callback.answer()
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —è–∑—ã–∫—É: {e}")
        try:
            await callback.answer()
        except:
            pass

@dp.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await callback.message.edit_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )
        await state.set_state(AdStates.main_menu)
        await callback.answer()
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        try:
            await callback.answer()
        except:
            pass

@dp.callback_query(F.data == "back_to_topics")
async def back_to_topics_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º"""
    await callback.message.edit_text(
        "üìù –í –∫–∞–∫—É—é —Ç–µ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å?",
        reply_markup=get_topics_keyboard()
    )
    await state.set_state(AdStates.choosing_topic)
    await callback.answer()

@dp.callback_query(F.data == "back_to_my_ads")
async def back_to_my_ads_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–æ–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º"""
    try:
        user_id = callback.from_user.id
        ads = await get_user_ads(user_id)
        user_limit = await get_user_limit(user_id)
        
        if not ads:
            await callback.message.edit_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_menu_keyboard()
            )
            await state.set_state(AdStates.main_menu)
        else:
            keyboard = await get_my_ads_keyboard(user_id)
            await callback.message.edit_text(
                f"üìã –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ({len(ads)}/{user_limit}):",
                reply_markup=keyboard
            )
            await state.set_state(AdStates.my_ads)
        await callback.answer()
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º: {e}")
        try:
            await callback.answer()
        except:
            pass

@dp.callback_query(StateFilter(AdStates.choosing_topic))
async def topic_handler(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–µ–º—ã"""
    topic_key = callback.data
    
    if topic_key in TOPICS:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
        await state.update_data(selected_topic=topic_key)
        
        topic_name = TOPICS[topic_key]["name"]
        await callback.message.edit_text(
            f"‚úçÔ∏è –¢–µ–º–∞: {topic_name}\n\n–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:",
            reply_markup=get_topic_actions_keyboard()
        )
        await state.set_state(AdStates.writing_ad)
    
    await callback.answer()

@dp.message(StateFilter(AdStates.writing_ad))
async def ad_text_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–∑ –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    if message.chat.id == TARGET_CHAT_ID:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    if await is_user_banned(message.from_user.id):
        await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
    user_id = message.from_user.id
    current_count = await get_user_ad_count(user_id)
    user_limit = await get_user_limit(user_id)
    
    if current_count >= user_limit:
        await message.answer(
            f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π!\n\n–£ –≤–∞—Å: {current_count}/{user_limit} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n–£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ /start ‚Üí –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
            reply_markup=get_back_to_main_keyboard()
        )
        await state.clear()
        return
    
    user_data_state = await state.get_data()
    selected_topic = user_data_state.get("selected_topic")
    
    if not selected_topic or selected_topic not in TOPICS:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
    topic_data = TOPICS[selected_topic]
    topic_id = topic_data["id"]
    topic_name = topic_data["name"]
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    ad_text = message.text or message.caption or ""
    if not ad_text:
        await message.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = ad_text.split('\n')
    if lines:
        # –ü–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ü–∏—Ç–∞—Ç—É
        formatted_text = f"<blockquote>{lines[0]}</blockquote>"
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –µ—Å—Ç—å
        if len(lines) > 1:
            formatted_text += "\n" + "\n".join(lines[1:])
    else:
        formatted_text = f"<blockquote>{ad_text}</blockquote>"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ—Ä–∞ –≤ —Ç–∏—Ä–µ
    if message.from_user.username:
        contact_url = f"https://t.me/{message.from_user.username}"
    else:
        contact_url = f"tg://user?id={message.from_user.id}"
    
    formatted_text += f'\n\n<a href="{contact_url}">‚Äî</a>'
    
    try:
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –≥—Ä—É–ø–ø—É
        sent_message = await bot.send_message(
            chat_id=TARGET_CHAT_ID,
            text=formatted_text,
            message_thread_id=topic_id,
            parse_mode="HTML"
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_url = f"https://t.me/c/{str(TARGET_CHAT_ID)[4:]}/{sent_message.message_id}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await add_user_ad(
            message.from_user.id, 
            sent_message.message_id, 
            message_url, 
            topic_name
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        await send_to_moderation(
            message.from_user.id,
            message.from_user.username,
            ad_text,
            message_url,
            topic_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        new_count = await get_user_ad_count(message.from_user.id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
        await message.answer(
            f"‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!\nüìä –û–±—ä—è–≤–ª–µ–Ω–∏–π: {new_count}/{user_limit}",
            reply_markup=get_post_actions_keyboard(message.from_user.id, message_url)
        )
        
        logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}, —Ç–µ–º–∞ {selected_topic}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        if "not enough rights" in str(e):
            error_msg = ("‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É.\n\n"
                        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        elif "chat not found" in str(e):
            error_msg = "‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        elif "thread not found" in str(e):
            error_msg = f"‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ '{topic_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ."
        else:
            error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        await message.answer(error_msg)
    
    await state.clear()

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
@dp.message()
async def block_target_chat_messages(message: Message):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    if message.chat.id == TARGET_CHAT_ID:
        return
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    pass

@dp.callback_query(F.data == "create_new")
async def create_new_handler(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    if await is_user_banned(callback.from_user.id):
        await callback.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üìù –í –∫–∞–∫—É—é —Ç–µ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å?",
        reply_markup=get_topics_keyboard()
    )
    await state.set_state(AdStates.choosing_topic)
    await callback.answer()

@dp.callback_query(F.data.startswith("view_ad_"))
async def view_ad_handler(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ–π—Å—Ç–≤–∏–π —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º"""
    message_id = int(callback.data.split("_")[-1])
    ad_data = await get_ad_by_message_id(message_id)
    
    if not ad_data:
        await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    user_id, message_id, message_url, topic_name = ad_data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if user_id != callback.from_user.id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"üìÑ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ–º–µ: {topic_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_ad_actions_keyboard(message_id, message_url)
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_ad_"))
async def delete_ad_handler(callback: CallbackQuery, state: FSMContext):
    """–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    message_id = int(callback.data.split("_")[-1])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete_{message_id}"),
            InlineKeyboardButton(text="‚úÖ –û–ö", callback_data=f"confirm_delete_{message_id}")
        ]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard
    )
    await callback.answer("‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", show_alert=True)

@dp.callback_query(F.data.startswith("cancel_delete_"))
async def cancel_delete_handler(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    if await is_user_banned(callback.from_user.id):
        await callback.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.", show_alert=True)
        return
    
    message_id = int(callback.data.split("_")[-1])
    ad_data = await get_ad_by_message_id(message_id)
    
    if not ad_data:
        await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    user_id, message_id, message_url, topic_name = ad_data
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    await callback.message.edit_text(
        f"üìÑ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ–º–µ: {topic_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_ad_actions_keyboard(message_id, message_url)
    )
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@dp.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
        if await is_user_banned(callback.from_user.id):
            await callback.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.", show_alert=True)
            return
        
        message_id = int(callback.data.split("_")[-1])
        ad_data = await get_ad_by_message_id(message_id)
        
        if not ad_data:
            await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        user_id, message_id, message_url, topic_name = ad_data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if user_id != callback.from_user.id:
            await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", show_alert=True)
            return
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞
            await bot.delete_message(chat_id=TARGET_CHAT_ID, message_id=message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ —á–∞—Ç–∞: {e}")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        await delete_user_ad(message_id)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        ads = await get_user_ads(callback.from_user.id)
        user_limit = await get_user_limit(callback.from_user.id)
        
        if not ads:
            await callback.message.edit_text(
                "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!\n\n–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        else:
            keyboard = await get_my_ads_keyboard(callback.from_user.id)
            await callback.message.edit_text(
                f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!\n\nüìã –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ({len(ads)}/{user_limit}):",
                reply_markup=keyboard
            )
        
        await callback.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
        try:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
        except:
            pass

async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    ]
    await bot.set_my_commands(commands)

async def start_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Render"""
    app.router.add_get('/health', health_check)
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    site = web.TCPSite(runner, '0.0.0.0', PORT)
    await site.start()
    
    logger.info(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        await init_db()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        await set_bot_commands()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        await start_web_server()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–ø–∏–Ω–≥–∞
        asyncio.create_task(start_ping_task())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        if db_pool:
            await db_pool.close()
            logger.info("üìä –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    asyncio.run(main())
