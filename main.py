"""
–ü—Ä–æ–¥–∞–∫—à–Ω-–≥–æ—Ç–æ–≤—ã–π Telegram –±–æ—Ç –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: webhook + aiohttp + PostgreSQL + Redis cache
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Render.com deployment
"""

import asyncio
import logging
import os
import json
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any, Tuple
from contextlib import asynccontextmanager
import asyncpg
import redis.asyncio as redis
from aiohttp import web, ClientSession
from aiogram import Bot, Dispatcher
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, 
    InlineKeyboardButton, BotCommand, Update
)
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from pydantic import BaseModel, Field, validator
import re
from functools import wraps
from collections import defaultdict
import time

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

class Config:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"""
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    DATABASE_URL = os.getenv("DATABASE_URL")
    REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379")
    
    # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    TARGET_CHAT_ID = int(os.getenv("TARGET_CHAT_ID", "-1002827106973"))
    MODERATION_CHAT_ID = int(os.getenv("MODERATION_CHAT_ID", "0"))
    
    # Web –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", "https://your-app.onrender.com")
    WEBHOOK_PATH = "/webhook"
    WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
    PORT = int(os.getenv("PORT", 8080))
    
    # –ë–∏–∑–Ω–µ—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    GROUP_LINK = os.getenv("GROUP_LINK", "https://t.me/your_group")
    EXAMPLE_URL = os.getenv("EXAMPLE_URL", "https://example.com")
    DEFAULT_AD_LIMIT = 4
    RATE_LIMIT_WINDOW = 60  # —Å–µ–∫—É–Ω–¥
    RATE_LIMIT_MAX_REQUESTS = 10
    
    # Database pool –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    DB_MIN_SIZE = 2
    DB_MAX_SIZE = 10
    DB_COMMAND_TIMEOUT = 30
    
    @classmethod
    def validate(cls):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if not cls.BOT_TOKEN:
            raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        if not cls.DATABASE_URL:
            raise ValueError("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# ==================== –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ====================

class UserAd(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    id: Optional[int] = None
    user_id: int
    message_id: int
    message_url: str
    topic_name: str
    created_at: Optional[datetime] = None

class TopicInfo(BaseModel):
    """–ú–æ–¥–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–µ"""
    name: str
    id: int

class ValidationResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
    is_valid: bool
    error_message: str = ""

# ==================== –°–û–°–¢–û–Ø–ù–ò–Ø FSM ====================

class AdStates(StatesGroup):
    choosing_language = State()
    main_menu = State()
    choosing_topic = State() 
    writing_ad = State()
    my_ads = State()
    editing_ad = State()

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–ï–ú ====================

TOPICS: Dict[str, TopicInfo] = {
    "topic_1": TopicInfo(name="üíº –†–∞–±–æ—Ç–∞", id=27),
    "topic_2": TopicInfo(name="üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", id=28),
    "topic_3": TopicInfo(name="üöó –ê–≤—Ç–æ", id=29),
    "topic_4": TopicInfo(name="üõçÔ∏è –¢–æ–≤–∞—Ä—ã", id=30),
    "topic_5": TopicInfo(name="üí° –£—Å–ª—É–≥–∏", id=31),
    "topic_6": TopicInfo(name="üìö –û–±—É—á–µ–Ω–∏–µ", id=32),
}

# ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ====================

bot: Bot = None
dp: Dispatcher = None
db_pool: asyncpg.Pool = None
redis_client: redis.Redis = None
app: web.Application = None

# Rate limiting
rate_limiter = defaultdict(list)

# ==================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
        ]
    )
    # –û—Ç–∫–ª—é—á–∞–µ–º verbose –ª–æ–≥–∏
    logging.getLogger('aiogram').setLevel(logging.WARNING)
    logging.getLogger('aiohttp').setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

# ==================== –î–ï–ö–û–†–ê–¢–û–†–´ ====================

def rate_limit(max_requests: int = Config.RATE_LIMIT_MAX_REQUESTS, 
               window: int = Config.RATE_LIMIT_WINDOW):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è rate limiting"""
    def decorator(func):
        @wraps(func)
        async def wrapper(event, *args, **kwargs):
            user_id = getattr(event.from_user, 'id', None)
            if not user_id:
                return await func(event, *args, **kwargs)
            
            now = time.time()
            requests = rate_limiter[user_id]
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            requests[:] = [req_time for req_time in requests if now - req_time < window]
            
            if len(requests) >= max_requests:
                if hasattr(event, 'answer'):
                    await event.answer("‚è± –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
                return
            
            requests.append(now)
            return await func(event, *args, **kwargs)
        return wrapper
    return decorator

def ban_check(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞"""
    @wraps(func)
    async def wrapper(event, *args, **kwargs):
        user_id = getattr(event.from_user, 'id', None)
        if user_id and await is_user_banned(user_id):
            if hasattr(event, 'answer'):
                await event.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.", show_alert=True)
            return
        return await func(event, *args, **kwargs)
    return wrapper

# ==================== –ö–≠–®–ò–†–û–í–ê–ù–ò–ï ====================

class CacheService:
    """–°–µ—Ä–≤–∏—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    @staticmethod
    async def get(key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞"""
        try:
            value = await redis_client.get(key)
            return json.loads(value) if value else None
        except Exception as e:
            logger.warning(f"Cache get error: {e}")
            return None
    
    @staticmethod
    async def set(key: str, value: Any, ttl: int = 300) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à"""
        try:
            await redis_client.setex(key, ttl, json.dumps(value, default=str))
            return True
        except Exception as e:
            logger.warning(f"Cache set error: {e}")
            return False
    
    @staticmethod
    async def delete(key: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞"""
        try:
            await redis_client.delete(key)
            return True
        except Exception as e:
            logger.warning(f"Cache delete error: {e}")
            return False

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

@asynccontextmanager
async def get_db_connection():
    """Context manager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
    async with db_pool.acquire() as connection:
        try:
            yield connection
        except Exception as e:
            logger.error(f"Database error: {e}")
            raise

class DatabaseService:
    """–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    async def init_database():
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        global db_pool
        
        Config.validate()
        
        try:
            db_pool = await asyncpg.create_pool(
                Config.DATABASE_URL,
                min_size=Config.DB_MIN_SIZE,
                max_size=Config.DB_MAX_SIZE,
                command_timeout=Config.DB_COMMAND_TIMEOUT
            )
            
            async with get_db_connection() as conn:
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
                await conn.execute("""
                    CREATE TABLE IF NOT EXISTS user_ads (
                        id SERIAL PRIMARY KEY,
                        user_id BIGINT NOT NULL,
                        message_id BIGINT NOT NULL UNIQUE,
                        message_url TEXT NOT NULL,
                        topic_name TEXT NOT NULL,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                await conn.execute("""
                    CREATE TABLE IF NOT EXISTS banned_users (
                        user_id BIGINT PRIMARY KEY,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                await conn.execute("""
                    CREATE TABLE IF NOT EXISTS user_limits (
                        user_id BIGINT PRIMARY KEY,
                        ad_limit INTEGER NOT NULL DEFAULT 4,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
                indexes = [
                    "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_ads_user_id ON user_ads(user_id)",
                    "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_ads_message_id ON user_ads(message_id)",
                    "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_ads_created_at ON user_ads(created_at DESC)",
                    "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_ads_topic ON user_ads(topic_name)",
                ]
                
                for index_sql in indexes:
                    try:
                        await conn.execute(index_sql)
                    except Exception as e:
                        if "already exists" not in str(e):
                            logger.warning(f"Index creation warning: {e}")
            
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise
    
    @staticmethod
    async def add_user_ad(user_ad: UserAd) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with get_db_connection() as conn:
                await conn.execute(
                    """INSERT INTO user_ads (user_id, message_id, message_url, topic_name) 
                       VALUES ($1, $2, $3, $4)""",
                    user_ad.user_id, user_ad.message_id, user_ad.message_url, user_ad.topic_name
                )
                
                # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
                await CacheService.delete(f"user_ads:{user_ad.user_id}")
                await CacheService.delete(f"user_ad_count:{user_ad.user_id}")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            return False
    
    @staticmethod
    async def get_user_ads(user_id: int) -> List[Tuple[int, str, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = f"user_ads:{user_id}"
        cached = await CacheService.get(cache_key)
        if cached:
            return cached
        
        try:
            async with get_db_connection() as conn:
                rows = await conn.fetch(
                    """SELECT message_id, message_url, topic_name 
                       FROM user_ads WHERE user_id = $1 
                       ORDER BY created_at DESC""",
                    user_id
                )
                result = [(row['message_id'], row['message_url'], row['topic_name']) for row in rows]
                await CacheService.set(cache_key, result, 300)
                return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
            return []
    
    @staticmethod
    async def get_user_ads_with_counts(user_id: int) -> List[Tuple[int, str, str, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–µ–º–∞–º"""
        ads = await DatabaseService.get_user_ads(user_id)
        
        topic_counts = defaultdict(int)
        result = []
        
        for message_id, message_url, topic_name in ads:
            topic_counts[topic_name] += 1
            topic_display = f"{topic_name} {topic_counts[topic_name]}"
            result.append((message_id, message_url, topic_display, topic_name))
        
        return result
    
    @staticmethod
    async def get_ad_by_message_id(message_id: int) -> Optional[Tuple[int, int, str, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ message_id —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = f"ad:{message_id}"
        cached = await CacheService.get(cache_key)
        if cached:
            return tuple(cached)
        
        try:
            async with get_db_connection() as conn:
                row = await conn.fetchrow(
                    """SELECT user_id, message_id, message_url, topic_name 
                       FROM user_ads WHERE message_id = $1""",
                    message_id
                )
                if row:
                    result = (row['user_id'], row['message_id'], row['message_url'], row['topic_name'])
                    await CacheService.set(cache_key, result, 600)
                    return result
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            return None
    
    @staticmethod
    async def delete_user_ad(message_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"""
        try:
            async with get_db_connection() as conn:
                # –ü–æ–ª—É—á–∞–µ–º user_id –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞
                row = await conn.fetchrow(
                    "SELECT user_id FROM user_ads WHERE message_id = $1", message_id
                )
                
                if row:
                    user_id = row['user_id']
                    await conn.execute(
                        "DELETE FROM user_ads WHERE message_id = $1", message_id
                    )
                    
                    # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
                    await CacheService.delete(f"user_ads:{user_id}")
                    await CacheService.delete(f"user_ad_count:{user_id}")
                    await CacheService.delete(f"ad:{message_id}")
                    return True
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            return False
    
    @staticmethod
    async def get_user_ad_count(user_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = f"user_ad_count:{user_id}"
        cached = await CacheService.get(cache_key)
        if cached is not None:
            return cached
        
        try:
            async with get_db_connection() as conn:
                result = await conn.fetchval(
                    "SELECT COUNT(*) FROM user_ads WHERE user_id = $1", user_id
                )
                count = result if result else 0
                await CacheService.set(cache_key, count, 60)
                return count
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
            return 0
    
    @staticmethod
    async def ban_user(user_id: int) -> bool:
        """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with get_db_connection() as conn:
                await conn.execute(
                    """INSERT INTO banned_users (user_id) 
                       VALUES ($1) ON CONFLICT (user_id) DO NOTHING""",
                    user_id
                )
                await CacheService.delete(f"banned:{user_id}")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    @staticmethod
    async def unban_user(user_id: int) -> bool:
        """–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with get_db_connection() as conn:
                await conn.execute(
                    "DELETE FROM banned_users WHERE user_id = $1", user_id
                )
                await CacheService.delete(f"banned:{user_id}")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

# ==================== –í–ê–õ–ò–î–ê–¶–ò–Ø ====================

class ValidationService:
    """–°–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def validate_message_text(text: str) -> ValidationResult:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not text or not text.strip():
            return ValidationResult(is_valid=False, error_message="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        
        if len(text) > 4000:
            return ValidationResult(is_valid=False, error_message="‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ @username
        if '@' in text:
            return ValidationResult(is_valid=False, error_message="‚ùå @username –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è, –º—ã —Å–∞–º–∏ –≤—Å—Ç–∞–≤–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—Å.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ URL
        if re.search(r'https?://', text, re.IGNORECASE):
            return ValidationResult(is_valid=False, error_message="‚ùå –°—Å—ã–ª–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è, –º—ã —Å–∞–º–∏ –≤—Å—Ç–∞–≤–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—Å.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ö—ç—à—Ç–µ–≥–∏
        if '#' in text:
            return ValidationResult(is_valid=False, error_message="‚ùå –•—ç—à—Ç–µ–≥–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è, –º—ã —Å–∞–º–∏ –≤—Å—Ç–∞–≤–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—Å.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–æ–º–µ–Ω—ã
        domain_pattern = r'\b[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.([a-zA-Z]{2,})\b'
        if re.search(domain_pattern, text):
            return ValidationResult(is_valid=False, error_message="‚ùå –°–∞–π—Ç—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è, –º—ã —Å–∞–º–∏ –≤—Å—Ç–∞–≤–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—Å.")
        
        return ValidationResult(is_valid=True)

# ==================== –£–¢–ò–õ–ò–¢–´ ====================

async def is_user_banned(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cache_key = f"banned:{user_id}"
    cached = await CacheService.get(cache_key)
    if cached is not None:
        return cached
    
    try:
        async with get_db_connection() as conn:
            result = await conn.fetchval(
                "SELECT 1 FROM banned_users WHERE user_id = $1", user_id
            )
            is_banned = result is not None
            await CacheService.set(cache_key, is_banned, 300)
            return is_banned
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞: {e}")
        return False

async def get_user_limit(user_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cache_key = f"user_limit:{user_id}"
    cached = await CacheService.get(cache_key)
    if cached is not None:
        return cached
    
    try:
        async with get_db_connection() as conn:
            result = await conn.fetchval(
                "SELECT ad_limit FROM user_limits WHERE user_id = $1", user_id
            )
            limit = result if result else Config.DEFAULT_AD_LIMIT
            await CacheService.set(cache_key, limit, 600)
            return limit
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞: {e}")
        return Config.DEFAULT_AD_LIMIT

async def notify_user(user_id: int, message: str) -> bool:
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await bot.send_message(chat_id=user_id, text=message)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

async def send_to_moderation(user_id: int, username: str, text: str, message_url: str, topic_name: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    if not Config.MODERATION_CHAT_ID or Config.MODERATION_CHAT_ID == 0:
        return
    
    try:
        username_text = f"@{username}" if username else "–ù–µ—Ç username"
        moderation_text = (
            f"üìã –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n"
            f"üë§ ID: {user_id}\n"
            f"üîó Username: {username_text}\n"
            f"üìÇ –¢–µ–º–∞: {topic_name}\n\n"
            f"üìù –¢–µ–∫—Å—Ç:\n{text}\n\n"
            f"üîó –°—Å—ã–ª–∫–∞: {message_url}"
        )
        
        await bot.send_message(chat_id=Config.MODERATION_CHAT_ID, text=moderation_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================

class KeyboardService:
    """–°–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    @staticmethod
    def get_language_keyboard() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
                InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")
            ]
        ])
    
    @staticmethod
    def get_main_menu_keyboard() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="create_ad"),
                InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="my_ads")
            ],
            [InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", url=Config.GROUP_LINK)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_language")]
        ])
    
    @staticmethod
    def get_topics_keyboard() -> InlineKeyboardMarkup:
        buttons = []
        topic_items = list(TOPICS.items())
        
        for i in range(0, len(topic_items), 2):
            row = []
            topic_key, topic_data = topic_items[i]
            row.append(InlineKeyboardButton(
                text=topic_data.name, 
                callback_data=topic_key
            ))
            
            if i + 1 < len(topic_items):
                topic_key2, topic_data2 = topic_items[i + 1]
                row.append(InlineKeyboardButton(
                    text=topic_data2.name, 
                    callback_data=topic_key2
                ))
            
            buttons.append(row)
        
        buttons.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

@dp.message(Command("start"))
@rate_limit()
async def start_handler(message: Message, state: FSMContext):
    """–°—Ç–∞—Ä—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    if message.chat.id == Config.TARGET_CHAT_ID:
        return
    
    if await is_user_banned(message.from_user.id):
        await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.")
        return
    
    await message.answer(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:",
        reply_markup=KeyboardService.get_language_keyboard()
    )
    await state.set_state(AdStates.choosing_language)

@dp.callback_query(F.data == "lang_ru", StateFilter(AdStates.choosing_language))
@rate_limit()
@ban_check
async def language_ru_handler(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=KeyboardService.get_main_menu_keyboard()
    )
    await state.set_state(AdStates.main_menu)
    await callback.answer()

@dp.callback_query(F.data == "lang_en", StateFilter(AdStates.choosing_language))
@rate_limit()
async def language_en_handler(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await callback.answer("üöß English version coming soon!", show_alert=True)

@dp.callback_query(F.data == "create_ad")
@rate_limit()
@ban_check
async def create_ad_handler(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "üìù –í –∫–∞–∫—É—é —Ç–µ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å?",
        reply_markup=KeyboardService.get_topics_keyboard()
    )
    await state.set_state(AdStates.choosing_topic)
    await callback.answer()

@dp.callback_query(F.data == "my_ads")
@rate_limit()
@ban_check
async def my_ads_handler(callback: CallbackQuery, state: FSMContext):
    """–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    ads = await DatabaseService.get_user_ads(user_id)
    user_limit = await get_user_limit(user_id)
    
    if not ads:
        await callback.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π", show_alert=True)
        return
    
    keyboard = await get_my_ads_keyboard(user_id)
    await callback.message.edit_text(
        f"üìã –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ({len(ads)}/{user_limit}):",
        reply_markup=keyboard
    )
    await state.set_state(AdStates.my_ads)
    await callback.answer()

@dp.callback_query(StateFilter(AdStates.choosing_topic))
@rate_limit()
@ban_check
async def topic_handler(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–µ–º—ã"""
    topic_key = callback.data
    
    if topic_key in TOPICS:
        await state.update_data(selected_topic=topic_key)
        
        topic_name = TOPICS[topic_key].name
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìñ –ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è", url=Config.EXAMPLE_URL)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_topics")]
        ])
        
        await callback.message.edit_text(
            f"‚úçÔ∏è –¢–µ–º–∞: {topic_name}\n\n–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:",
            reply_markup=keyboard
        )
        await state.set_state(AdStates.writing_ad)
    
    await callback.answer()

@dp.message(StateFilter(AdStates.writing_ad))
@rate_limit()
@ban_check
async def ad_text_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if message.chat.id == Config.TARGET_CHAT_ID:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    user_id = message.from_user.id
    current_count = await DatabaseService.get_user_ad_count(user_id)
    user_limit = await get_user_limit(user_id)
    
    if current_count >= user_limit:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_main")]
        ])
        await message.answer(
            f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π!\n\n–£ –≤–∞—Å: {current_count}/{user_limit} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n–£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ '–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'",
            reply_markup=keyboard
        )
        await state.clear()
        return
    
    user_data = await state.get_data()
    selected_topic = user_data.get("selected_topic")
    
    if not selected_topic or selected_topic not in TOPICS:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        await state.clear()
        return
    
    topic_data = TOPICS[selected_topic]
    ad_text = message.text or message.caption or ""
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    validation = ValidationService.validate_message_text(ad_text)
    if not validation.is_valid:
        await message.answer(validation.error_message)
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    lines = ad_text.split('\n')
    formatted_text = f"<blockquote>{lines[0]}</blockquote>"
    if len(lines) > 1:
        formatted_text += "\n" + "\n".join(lines[1:])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ—Ä–∞
    contact_url = (f"https://t.me/{message.from_user.username}" 
                  if message.from_user.username 
                  else f"tg://user?id={message.from_user.id}")
    formatted_text += f'\n\n<a href="{contact_url}">‚Äî</a>'
    
    try:
        # –ü—É–±–ª–∏–∫—É–µ–º
        sent_message = await bot.send_message(
            chat_id=Config.TARGET_CHAT_ID,
            text=formatted_text,
            message_thread_id=topic_data.id,
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        message_url = f"https://t.me/c/{str(Config.TARGET_CHAT_ID)[4:]}/{sent_message.message_id}"
        
        user_ad = UserAd(
            user_id=user_id,
            message_id=sent_message.message_id,
            message_url=message_url,
            topic_name=topic_data.name
        )
        
        await DatabaseService.add_user_ad(user_ad)
        await send_to_moderation(user_id, message.from_user.username, ad_text, message_url, topic_data.name)
        
        new_count = await DatabaseService.get_user_ad_count(user_id)
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="create_ad"),
                InlineKeyboardButton(text="üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", url=message_url)
            ],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="my_ads")],
            [InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_main")]
        ])
        
        await message.answer(
            f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!\nüìä –û–±—ä—è–≤–ª–µ–Ω–∏–π: {new_count}/{user_limit}",
            reply_markup=keyboard
        )
        
        logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Ç–µ–º–∞ {selected_topic}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_main")]
        ])
        
        if "not enough rights" in str(e):
            error_msg = "‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É"
        elif "chat not found" in str(e):
            error_msg = "‚ùå –û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        elif "thread not found" in str(e):
            error_msg = f"‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ '{topic_data.name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ"
        else:
            error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        await message.answer(error_msg, reply_markup=keyboard)
    
    await state.clear()

@dp.message(StateFilter(AdStates.editing_ad))
@rate_limit()
@ban_check
async def edit_ad_text_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if message.chat.id == Config.TARGET_CHAT_ID:
        return
    
    user_data = await state.get_data()
    editing_message_id = user_data.get("editing_message_id")
    message_url = user_data.get("message_url")
    topic_name = user_data.get("topic_name")
    
    if not editing_message_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return
    
    new_text = message.text or message.caption or ""
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    validation = ValidationService.validate_message_text(new_text)
    if not validation.is_valid:
        await message.answer(validation.error_message)
        return
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
    success = await edit_message_in_group(
        editing_message_id, 
        new_text, 
        message.from_user.id,
        message.from_user.username
    )
    
    if success:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        await send_edit_to_moderation(
            message.from_user.id,
            message.from_user.username,
            new_text,
            message_url,
            topic_name
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="my_ads"),
                InlineKeyboardButton(text="üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", url=message_url)
            ],
            [InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_main")]
        ])
        
        await message.answer(
            "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!",
            reply_markup=keyboard
        )
        logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}, —Å–æ–æ–±—â–µ–Ω–∏–µ {editing_message_id}")
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_main")]
        ])
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=keyboard
        )
    
    await state.clear()

# ==================== –ù–ê–í–ò–ì–ê–¶–ò–Ø ====================

@dp.callback_query(F.data == "back_to_language")
async def back_to_language_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞"""
    try:
        await callback.message.edit_text(
            "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:",
            reply_markup=KeyboardService.get_language_keyboard()
        )
        await state.set_state(AdStates.choosing_language)
        await callback.answer()
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —è–∑—ã–∫—É: {e}")
        await callback.answer()

@dp.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await callback.message.edit_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=KeyboardService.get_main_menu_keyboard()
        )
        await state.set_state(AdStates.main_menu)
        await callback.answer()
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await callback.answer()

@dp.callback_query(F.data == "back_to_topics")
async def back_to_topics_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º"""
    await callback.message.edit_text(
        "üìù –í –∫–∞–∫—É—é —Ç–µ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å?",
        reply_markup=KeyboardService.get_topics_keyboard()
    )
    await state.set_state(AdStates.choosing_topic)
    await callback.answer()

@dp.callback_query(F.data == "back_to_my_ads")
async def back_to_my_ads_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–æ–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º"""
    try:
        user_id = callback.from_user.id
        ads = await DatabaseService.get_user_ads(user_id)
        user_limit = await get_user_limit(user_id)
        
        if not ads:
            await callback.message.edit_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=KeyboardService.get_main_menu_keyboard()
            )
            await state.set_state(AdStates.main_menu)
        else:
            keyboard = await get_my_ads_keyboard(user_id)
            await callback.message.edit_text(
                f"üìã –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ({len(ads)}/{user_limit}):",
                reply_markup=keyboard
            )
            await state.set_state(AdStates.my_ads)
        await callback.answer()
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º: {e}")
        await callback.answer()

# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–™–Ø–í–õ–ï–ù–ò–Ø–ú–ò ====================

@dp.callback_query(F.data.startswith("view_ad_"))
async def view_ad_handler(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ–π—Å—Ç–≤–∏–π —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º"""
    message_id = int(callback.data.split("_")[-1])
    ad_data = await DatabaseService.get_ad_by_message_id(message_id)
    
    if not ad_data:
        await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    user_id, message_id, message_url, topic_name = ad_data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å
    if user_id != callback.from_user.id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_ad_{message_id}"),
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_ad_{message_id}")
        ],
        [InlineKeyboardButton(text="üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", url=message_url)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_my_ads")]
    ])
    
    await callback.message.edit_text(
        f"üìÑ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ–º–µ: {topic_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("edit_ad_"))
@rate_limit()
@ban_check
async def edit_ad_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    message_id = int(callback.data.split("_")[-1])
    ad_data = await DatabaseService.get_ad_by_message_id(message_id)
    
    if not ad_data:
        await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    user_id, message_id, message_url, topic_name = ad_data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å
    if user_id != callback.from_user.id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(
        editing_message_id=message_id,
        message_url=message_url,
        topic_name=topic_name
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", url=message_url)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_ad_{message_id}")]
    ])
    
    await callback.message.edit_text(
        "‚úèÔ∏è –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã, –∏–∑–º–µ–Ω–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ:",
        reply_markup=keyboard
    )
    
    await state.set_state(AdStates.editing_ad)
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_ad_"))
async def delete_ad_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    message_id = int(callback.data.split("_")[-1])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_delete_{message_id}"),
            InlineKeyboardButton(text="‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{message_id}")
        ]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard
    )
    await callback.answer("‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", show_alert=True)

@dp.callback_query(F.data.startswith("cancel_delete_"))
async def cancel_delete_handler(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    message_id = int(callback.data.split("_")[-1])
    ad_data = await DatabaseService.get_ad_by_message_id(message_id)
    
    if not ad_data:
        await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    user_id, message_id, message_url, topic_name = ad_data
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_ad_{message_id}"),
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_ad_{message_id}")
        ],
        [InlineKeyboardButton(text="üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", url=message_url)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_my_ads")]
    ])
    
    await callback.message.edit_text(
        f"üìÑ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ–º–µ: {topic_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@dp.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    try:
        message_id = int(callback.data.split("_")[-1])
        ad_data = await DatabaseService.get_ad_by_message_id(message_id)
        
        if not ad_data:
            await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        user_id, message_id, message_url, topic_name = ad_data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å
        if user_id != callback.from_user.id:
            await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", show_alert=True)
            return
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞
            await bot.delete_message(chat_id=Config.TARGET_CHAT_ID, message_id=message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ —á–∞—Ç–∞: {e}")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        await DatabaseService.delete_user_ad(message_id)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        ads = await DatabaseService.get_user_ads_with_counts(callback.from_user.id)
        user_limit = await get_user_limit(callback.from_user.id)
        
        if not ads:
            await callback.message.edit_text(
                "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!\n\n–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        else:
            keyboard = await get_my_ads_keyboard(callback.from_user.id)
            await callback.message.edit_text(
                f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!\n\nüìã –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ({len(ads)}/{user_limit}):",
                reply_markup=keyboard
            )
        
        await callback.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)

# ==================== –ë–õ–û–ö–ò–†–û–í–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –ò–ó –ì–†–£–ü–ü–´ ====================

@dp.message()
async def block_target_chat_messages(message: Message):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    if message.chat.id == Config.TARGET_CHAT_ID:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    
    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    pass

# ==================== –ö–û–ú–ê–ù–î–´ –ú–û–î–ï–†–ê–¶–ò–ò ====================

@dp.message(Command("ban"))
async def ban_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.chat.id == Config.TARGET_CHAT_ID:
        return
    
    if not Config.MODERATION_CHAT_ID or message.chat.id != Config.MODERATION_CHAT_ID:
        return
    
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id>")
            return
        
        user_id = int(args[1])
        await DatabaseService.ban_user(user_id)
        await notify_user(user_id, "üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("banall"))
async def banall_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –±–∞–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.chat.id == Config.TARGET_CHAT_ID:
        return
    
    if not Config.MODERATION_CHAT_ID or message.chat.id != Config.MODERATION_CHAT_ID:
        return
    
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /banall <user_id>")
            return
        
        user_id = int(args[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        ads = await DatabaseService.get_user_ads(user_id)
        deleted_count = 0
        
        for message_id, _, _ in ads:
            try:
                await bot.delete_message(chat_id=Config.TARGET_CHAT_ID, message_id=message_id)
                await DatabaseService.delete_user_ad(message_id)
                deleted_count += 1
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
        
        # –ë–∞–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await DatabaseService.ban_user(user_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await notify_user(user_id, f"üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π. –í—Å–µ –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ({deleted_count} —à—Ç.) —É–¥–∞–ª–µ–Ω—ã.")
        
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω\n"
            f"üóë –£–¥–∞–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {deleted_count}"
        )
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("banoff"))
async def banoff_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.chat.id == Config.TARGET_CHAT_ID:
        return
    
    if not Config.MODERATION_CHAT_ID or message.chat.id != Config.MODERATION_CHAT_ID:
        return
    
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /banoff <user_id>")
            return
        
        user_id = int(args[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not await is_user_banned(user_id):
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω")
            return
        
        # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await DatabaseService.unban_user(user_id)
        await notify_user(user_id, "‚úÖ –í–∞—à–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ —Ä–∞–∑–º–µ—â–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
        
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("setlimit"))
async def setlimit_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    if message.chat.id == Config.TARGET_CHAT_ID:
        return
    
    if not Config.MODERATION_CHAT_ID or message.chat.id != Config.MODERATION_CHAT_ID:
        return
    
    try:
        args = message.text.split()
        if len(args) != 3:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setlimit <user_id> <limit>")
            return
        
        user_id = int(args[1])
        limit = int(args[2])
        
        if limit < 0:
            await message.answer("‚ùå –õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            return
        
        if limit > 50:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: 50 –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            return
        
        old_limit = await get_user_limit(user_id)
        await set_user_limit(user_id, limit)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if limit > old_limit:
            await notify_user(user_id, f"üìà –í–∞—à –ª–∏–º–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É–≤–µ–ª–∏—á–µ–Ω —Å {old_limit} –¥–æ {limit}.")
        elif limit < old_limit:
            await notify_user(user_id, f"üìâ –í–∞—à –ª–∏–º–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É–º–µ–Ω—å—à–µ–Ω —Å {old_limit} –¥–æ {limit}.")
        
        await message.answer(f"‚úÖ –õ–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("deladmin"))
async def deladmin_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if message.chat.id == Config.TARGET_CHAT_ID:
        return
    
    if not Config.MODERATION_CHAT_ID or message.chat.id != Config.MODERATION_CHAT_ID:
        return
    
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deladmin <message_id>")
            return
        
        message_id = int(args[1])
        ad_data = await DatabaseService.get_ad_by_message_id(message_id)
        
        if not ad_data:
            await message.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        user_id, msg_id, message_url, topic_name = ad_data
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        ads = await DatabaseService.get_user_ads_with_counts(user_id)
        ad_display_name = "–æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
        for ad_msg_id, _, topic_display, _ in ads:
            if ad_msg_id == message_id:
                ad_display_name = f'"{topic_display}"'
                break
        
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞
            await bot.delete_message(chat_id=Config.TARGET_CHAT_ID, message_id=message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ —á–∞—Ç–∞: {e}")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        await DatabaseService.delete_user_ad(message_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await notify_user(user_id, f"üóë –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {ad_display_name} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏–∑-–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª.")
        
        await message.answer(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("getlimit"))
async def getlimit_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    if message.chat.id == Config.TARGET_CHAT_ID:
        return
    
    if not Config.MODERATION_CHAT_ID or message.chat.id != Config.MODERATION_CHAT_ID:
        return
    
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /getlimit <user_id>")
            return
        
        user_id = int(args[1])
        current_count = await DatabaseService.get_user_ad_count(user_id)
        user_limit = await get_user_limit(user_id)
        
        await message.answer(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
            f"üìä –û–±—ä—è–≤–ª–µ–Ω–∏–π: {current_count}/{user_limit}\n"
            f"üî¢ –õ–∏–º–∏—Ç: {user_limit}"
        )
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# ==================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ ====================

async def edit_message_in_group(message_id: int, new_text: str, user_id: int, username: str = None) -> bool:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ"""
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = new_text.split('\n')
        if lines:
            # –ü–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ü–∏—Ç–∞—Ç—É
            formatted_text = f"<blockquote>{lines[0]}</blockquote>"
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –µ—Å—Ç—å
            if len(lines) > 1:
                formatted_text += "\n" + "\n".join(lines[1:])
        else:
            formatted_text = f"<blockquote>{new_text}</blockquote>"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ—Ä–∞
        if username:
            contact_url = f"https://t.me/{username}"
        else:
            contact_url = f"tg://user?id={user_id}"
        
        formatted_text += f'\n\n<a href="{contact_url}">‚Äî</a>'
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        await bot.edit_message_text(
            chat_id=Config.TARGET_CHAT_ID,
            message_id=message_id,
            text=formatted_text,
            parse_mode="HTML"
        )
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

async def send_edit_to_moderation(user_id: int, username: str, text: str, message_url: str, topic_name: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    if not Config.MODERATION_CHAT_ID or Config.MODERATION_CHAT_ID == 0:
        return
    
    try:
        username_text = f"@{username}" if username else "–ù–µ—Ç username"
        message_id = message_url.split('/')[-1]
        
        moderation_text = (
            f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
            f"üë§ ID: {user_id}\n"
            f"üîó Username: {username_text}\n"
            f"üìÇ –¢–µ–º–∞: {topic_name}\n"
            f"üÜî ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id}\n\n"
            f"üìù –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:\n{text}\n\n"
            f"üîó –°—Å—ã–ª–∫–∞: {message_url}"
        )
        
        await bot.send_message(
            chat_id=Config.MODERATION_CHAT_ID,
            text=moderation_text
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")

async def set_user_limit(user_id: int, limit: int):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with get_db_connection() as conn:
            await conn.execute(
                """INSERT INTO user_limits (user_id, ad_limit) 
                   VALUES ($1, $2) 
                   ON CONFLICT (user_id) 
                   DO UPDATE SET ad_limit = $2, updated_at = CURRENT_TIMESTAMP""",
                user_id, limit
            )
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
            await CacheService.delete(f"user_limit:{user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞: {e}")

async def get_my_ads_keyboard(user_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    ads = await DatabaseService.get_user_ads_with_counts(user_id)
    buttons = []
    
    for message_id, message_url, topic_display, _ in ads:
        buttons.append([
            InlineKeyboardButton(
                text=f"üìÑ {topic_display}", 
                callback_data=f"view_ad_{message_id}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================

async def init_redis():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis"""
    global redis_client
    try:
        redis_client = redis.from_url(Config.REDIS_URL, decode_responses=True)
        await redis_client.ping()
        logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        # Fallback –Ω–∞ –ø–∞–º—è—Ç—å
        redis_client = None

async def init_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    global bot, dp
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis storage
    if redis_client:
        storage = RedisStorage(redis_client)
    else:
        from aiogram.fsm.storage.memory import MemoryStorage
        storage = MemoryStorage()
    
    bot = Bot(token=Config.BOT_TOKEN)
    dp = Dispatcher(storage=storage)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
    commands = [
        BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    ]
    await bot.set_my_commands(commands)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    await bot.set_webhook(Config.WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {Config.WEBHOOK_URL}")

async def init_web_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global app
    
    app = web.Application()
    
    # Health check
    async def health(request):
        return web.json_response({
            "status": "ok",
            "timestamp": datetime.now().isoformat(),
            "bot_id": (await bot.get_me()).id if bot else None
        })
    
    # Metrics endpoint
    async def metrics(request):
        try:
            async with get_db_connection() as conn:
                total_ads = await conn.fetchval("SELECT COUNT(*) FROM user_ads")
                total_users = await conn.fetchval("SELECT COUNT(DISTINCT user_id) FROM user_ads")
                banned_users = await conn.fetchval("SELECT COUNT(*) FROM banned_users")
            
            return web.json_response({
                "total_ads": total_ads,
                "total_users": total_users,
                "banned_users": banned_users,
                "cache_status": "ok" if redis_client else "disabled"
            })
        except Exception as e:
            return web.json_response({"error": str(e)}, status=500)
    
    app.router.add_get('/health', health)
    app.router.add_get('/metrics', metrics)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_requests_handler.register(app, path=Config.WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    
    logger.info("‚úÖ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

async def cleanup():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    try:
        if bot:
            await bot.delete_webhook()
            await bot.session.close()
        
        if db_pool:
            await db_pool.close()
        
        if redis_client:
            await redis_client.aclose()
        
        logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

# ==================== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ====================

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    setup_logging()
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–Ω –±–æ—Ç–∞...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        await DatabaseService.init_database()
        await init_redis()
        await init_bot()
        await init_web_app()
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', Config.PORT)
        await site.start()
        
        logger.info(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {Config.PORT}")
        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            await asyncio.Event().wait()
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        await cleanup()

if __name__ == "__main__":
    asyncio.run(main())
