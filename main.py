import os
import logging
import asyncio
from pyrogram import Client, filters
from pyrogram.types import Message, ChatPermissions
from sqlalchemy import create_engine, Column, Integer, BigInteger, DateTime
from sqlalchemy.orm import declarative_base, sessionmaker
from datetime import datetime

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Pyrogram Client setup
API_ID = int(os.getenv('API_ID'))  # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞ my.telegram.org
API_HASH = os.getenv('API_HASH')   # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞ my.telegram.org
BOT_TOKEN = os.getenv('TELEGRAM_TOKEN')
PING_CHAT_ID = int(os.getenv('PING_CHAT_ID'))

# Database setup
DATABASE_URL = os.getenv('DATABASE_URL')
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

class MessageRecord(Base):
    __tablename__ = 'message_records'
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(BigInteger, index=True)
    message_id = Column(BigInteger, index=True)
    chat_id = Column(BigInteger, index=True)
    created_at = Column(DateTime, default=datetime.utcnow)

# Create tables
Base.metadata.create_all(bind=engine)

# Create Pyrogram client
app = Client(
    "message_tracker_bot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

# Permissions
restricted_permissions = ChatPermissions(
    can_send_messages=False,
    can_send_media_messages=False,
    can_send_polls=False,
    can_send_other_messages=False,
    can_add_web_page_previews=False,
    can_change_info=False,
    can_invite_users=False,
    can_pin_messages=False
)

unrestricted_permissions = ChatPermissions(
    can_send_messages=True,
    can_send_media_messages=True,
    can_send_polls=True,
    can_send_other_messages=True,
    can_add_web_page_previews=True,
    can_change_info=False,
    can_invite_users=False,
    can_pin_messages=False
)

def get_message_count(user_id: int, chat_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ"""
    session = SessionLocal()
    try:
        count = session.query(MessageRecord).filter_by(
            user_id=user_id, 
            chat_id=chat_id
        ).count()
        return count
    finally:
        session.close()

async def restrict_user(chat_id: int, user_id: int):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await app.restrict_chat_member(
            chat_id=chat_id,
            user_id=user_id,
            permissions=restricted_permissions
        )
        logger.info(f"‚úÖ Restricted user {user_id} in chat {chat_id}")
    except Exception as e:
        logger.error(f"‚ùå Failed to restrict user {user_id}: {e}")

async def unrestrict_user(chat_id: int, user_id: int):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await app.restrict_chat_member(
            chat_id=chat_id,
            user_id=user_id,
            permissions=unrestricted_permissions
        )
        logger.info(f"‚úÖ Unrestricted user {user_id} in chat {chat_id}")
    except Exception as e:
        logger.error(f"‚ùå Failed to unrestrict user {user_id}: {e}")

@app.on_message(filters.group & filters.text & ~filters.command)
async def handle_new_message(client: Client, message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    session = SessionLocal()
    try:
        user_id = message.from_user.id
        message_id = message.id
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        existing = session.query(MessageRecord).filter_by(
            message_id=message_id,
            chat_id=chat_id
        ).first()
        
        if not existing:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            new_record = MessageRecord(
                user_id=user_id,
                message_id=message_id,
                chat_id=chat_id
            )
            session.add(new_record)
            session.commit()
            
            logger.info(f"üìù Added message {message_id} from user {user_id} in chat {chat_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            count = get_message_count(user_id, chat_id)
            
            if count >= 3:
                await restrict_user(chat_id, user_id)
                logger.info(f"üö´ User {user_id} restricted (messages: {count})")
                
    except Exception as e:
        logger.error(f"‚ùå Error in handle_new_message: {e}")
        session.rollback()
    finally:
        session.close()

@app.on_deleted_messages()
async def handle_deleted_messages(client: Client, messages):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    session = SessionLocal()
    try:
        for message in messages:
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            record = session.query(MessageRecord).filter_by(
                message_id=message.id,
                chat_id=message.chat.id
            ).first()
            
            if record:
                user_id = record.user_id
                chat_id = record.chat_id
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
                session.delete(record)
                session.commit()
                
                logger.info(f"üóëÔ∏è Deleted message {message.id} from user {user_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                count = get_message_count(user_id, chat_id)
                
                if count < 3:
                    await unrestrict_user(chat_id, user_id)
                    logger.info(f"üîì User {user_id} unrestricted (messages: {count})")
                    
    except Exception as e:
        logger.error(f"‚ùå Error in handle_deleted_messages: {e}")
        session.rollback()
    finally:
        session.close()

async def ping_task():
    """–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ping —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await asyncio.sleep(10)  # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    
    while True:
        try:
            await app.send_message(chat_id=PING_CHAT_ID, text="üèì Ping")
            logger.info("üì° Ping sent successfully")
        except Exception as e:
            logger.error(f"‚ùå Ping failed: {e}")
        
        await asyncio.sleep(25 * 60)  # 25 –º–∏–Ω—É—Ç

@app.on_message(filters.command("status"))
async def status_command(client: Client, message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not message.reply_to_message:
        await message.reply("‚Ü©Ô∏è Reply to a user's message to check their status")
        return
    
    user_id = message.reply_to_message.from_user.id
    chat_id = message.chat.id
    count = get_message_count(user_id, chat_id)
    
    status = "üö´ Restricted" if count >= 3 else "‚úÖ Allowed"
    
    await message.reply(
        f"üë§ User: {message.reply_to_message.from_user.first_name}\n"
        f"üìä Messages: {count}/3\n"
        f"üé≠ Status: {status}"
    )

@app.on_message(filters.command("reset"))
async def reset_command(client: Client, message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    chat_member = await app.get_chat_member(message.chat.id, message.from_user.id)
    if chat_member.status not in ["creator", "administrator"]:
        await message.reply("‚ùå Only admins can use this command")
        return
    
    if not message.reply_to_message:
        await message.reply("‚Ü©Ô∏è Reply to a user's message to reset their counter")
        return
    
    session = SessionLocal()
    try:
        user_id = message.reply_to_message.from_user.id
        chat_id = message.chat.id
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        deleted = session.query(MessageRecord).filter_by(
            user_id=user_id,
            chat_id=chat_id
        ).delete()
        
        session.commit()
        
        if deleted > 0:
            await unrestrict_user(chat_id, user_id)
            await message.reply(f"üîÑ Reset {deleted} messages for user {message.reply_to_message.from_user.first_name}")
        else:
            await message.reply("üì≠ No messages found for this user")
            
    except Exception as e:
        logger.error(f"‚ùå Error in reset_command: {e}")
        await message.reply("‚ùå Error occurred while resetting")
        session.rollback()
    finally:
        session.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ Starting Message Tracker Bot...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await app.start()
    logger.info("‚úÖ Bot started successfully")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º ping –∑–∞–¥–∞—á—É
    asyncio.create_task(ping_task())
    logger.info("üì° Ping task started")
    
    # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º
    await app.idle()

if __name__ == "__main__":
    try:
        app.run(main())
    except KeyboardInterrupt:
        logger.info("üõë Bot stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Bot crashed: {e}")
        raise
