# ===========================================
# Makefile –¥–ª—è Telegram Bot –ø—Ä–æ–µ–∫—Ç–∞
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
# ===========================================

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PYTHON := python3
PIP := pip3
POETRY := poetry
DOCKER := docker
DOCKER_COMPOSE := docker-compose
PROJECT_NAME := telegram-bot

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

# –§–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
MAIN_FILE := main.py
REQUIREMENTS_FILE := requirements.txt
DOCKER_COMPOSE_FILE := docker-compose.yml
ENV_FILE := .env

# ==================== HELP ====================
.PHONY: help
help: ## üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "$(BLUE)ü§ñ Telegram Bot - –ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏$(NC)"
	@echo ""
	@echo "$(GREEN)üöÄ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(GREEN)üìù –ü–†–ò–ú–ï–†–´:$(NC)"
	@echo "  make dev          # –ó–∞–ø—É—Å–∫ –≤ development —Ä–µ–∂–∏–º–µ"
	@echo "  make test         # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"
	@echo "  make deploy       # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é"
	@echo "  make clean        # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"

# ==================== SETUP ====================
.PHONY: install
install: ## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	@echo "$(BLUE)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	$(PIP) install --upgrade pip wheel
	$(PIP) install -r $(REQUIREMENTS_FILE)
	@echo "$(GREEN)‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

.PHONY: install-dev
install-dev: install ## üõ†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	@echo "$(BLUE)üõ†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	$(PIP) install pytest pytest-asyncio pytest-cov black flake8 mypy bandit safety
	@echo "$(GREEN)‚úÖ Dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

.PHONY: setup
setup: ## üîß –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(BLUE)üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "$(YELLOW)‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞...$(NC)"; \
		cp .env.template $(ENV_FILE); \
		echo "$(RED)‚ùó –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º!$(NC)"; \
	fi
	@make install-dev
	@make check-env
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω$(NC)"

# ==================== –†–ê–ó–†–ê–ë–û–¢–ö–ê ====================
.PHONY: dev
dev: ## üöÄ –ó–∞–ø—É—Å–∫ –≤ development —Ä–µ–∂–∏–º–µ
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ development —Å–µ—Ä–≤–µ—Ä–∞...$(NC)"
	@make check-env
	$(DOCKER_COMPOSE) up -d --build
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080$(NC)"
	@echo "$(YELLOW)üìã –ö–æ–º–∞–Ω–¥—ã:$(NC)"
	@echo "  make logs    - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
	@echo "  make stop    - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
	@echo "  make restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"

.PHONY: run
run: ## ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ Docker)
	@echo "$(BLUE)‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...$(NC)"
	@make check-env
	$(PYTHON) $(MAIN_FILE)

.PHONY: logs
logs: ## üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
	$(DOCKER_COMPOSE) logs -f bot

.PHONY: stop
stop: ## ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(YELLOW)‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	$(DOCKER_COMPOSE) down
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

.PHONY: restart
restart: ## üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(YELLOW)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	$(DOCKER_COMPOSE) restart
	@echo "$(GREEN)‚úÖ –°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã$(NC)"

.PHONY: shell
shell: ## üêö –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
	$(DOCKER_COMPOSE) exec bot /bin/bash

.PHONY: db-shell
db-shell: ## üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	$(DOCKER_COMPOSE) exec postgres psql -U postgres -d telegram_bot

.PHONY: redis-shell
redis-shell: ## üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
	$(DOCKER_COMPOSE) exec redis redis-cli

# ==================== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ====================
.PHONY: test
test: ## üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
	@echo "$(BLUE)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	$(PYTHON) -m pytest tests/ -v --tb=short
	@echo "$(GREEN)‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)"

.PHONY: test-cov
test-cov: ## üìä –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
	@echo "$(BLUE)üìä –¢–µ—Å—Ç—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–∫—Ä—ã—Ç–∏—è...$(NC)"
	$(PYTHON) -m pytest tests/ -v --cov=. --cov-report=term --cov-report=html
	@echo "$(GREEN)‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ htmlcov/index.html$(NC)"

.PHONY: test-fast
test-fast: ## ‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã (–±–µ–∑ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö)
	$(PYTHON) -m pytest tests/ -v -m "not slow"

.PHONY: test-integration
test-integration: ## üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
	@echo "$(BLUE)üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã...$(NC)"
	$(DOCKER_COMPOSE) -f docker-compose.test.yml up --build --abort-on-container-exit
	$(DOCKER_COMPOSE) -f docker-compose.test.yml down

# ==================== –ö–ê–ß–ï–°–¢–í–û –ö–û–î–ê ====================
.PHONY: format
format: ## üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
	@echo "$(BLUE)üé® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞...$(NC)"
	$(PYTHON) -m black . --line-length=100
	@echo "$(GREEN)‚úÖ –ö–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω$(NC)"

.PHONY: lint
lint: ## üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞
	@echo "$(BLUE)üîç –õ–∏–Ω—Ç–∏–Ω–≥ –∫–æ–¥–∞...$(NC)"
	$(PYTHON) -m flake8 . --max-line-length=100 --exclude=migrations,venv,env
	@echo "$(GREEN)‚úÖ –õ–∏–Ω—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω$(NC)"

.PHONY: type-check
type-check: ## üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
	@echo "$(BLUE)üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤...$(NC)"
	$(PYTHON) -m mypy $(MAIN_FILE) --ignore-missing-imports
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

.PHONY: security
security: ## üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	@echo "$(BLUE)üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...$(NC)"
	$(PYTHON) -m safety check
	$(PYTHON) -m bandit -r . -x tests/ -f json -o bandit-report.json
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

.PHONY: quality
quality: format lint type-check security ## ‚ú® –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
	@echo "$(GREEN)‚ú® –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã$(NC)"

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
.PHONY: db-init
db-init: ## üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "$(BLUE)üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	$(DOCKER_COMPOSE) exec postgres psql -U postgres -d telegram_bot -f /docker-entrypoint-initdb.d/init.sql
	@echo "$(GREEN)‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞$(NC)"

.PHONY: db-backup
db-backup: ## üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ë–î
	@echo "$(BLUE)üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...$(NC)"
	@mkdir -p backups
	$(DOCKER_COMPOSE) exec -T postgres pg_dump -U postgres telegram_bot > backups/backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ backups/$(NC)"

.PHONY: db-restore
db-restore: ## üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –∏–∑ –±—ç–∫–∞–ø–∞
	@echo "$(BLUE)üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	@read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞: " backup_file; \
	$(DOCKER_COMPOSE) exec -T postgres psql -U postgres telegram_bot < backups/$$backup_file
	@echo "$(GREEN)‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞$(NC)"

.PHONY: db-reset
db-reset: ## üóëÔ∏è –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	@echo "$(RED)‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ!$(NC)"
	@read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): " confirm; \
	if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
		$(DOCKER_COMPOSE) down -v; \
		$(DOCKER_COMPOSE) up -d postgres; \
		sleep 5; \
		make db-init; \
		echo "$(GREEN)‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞$(NC)"; \
	else \
		echo "$(YELLOW)‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞$(NC)"; \
	fi

# ==================== –î–ï–ü–õ–û–ô ====================
.PHONY: build
build: ## üèóÔ∏è –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
	@echo "$(BLUE)üèóÔ∏è –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...$(NC)"
	$(DOCKER) build -t $(PROJECT_NAME):latest .
	@echo "$(GREEN)‚úÖ –û–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω$(NC)"

.PHONY: prepare-deploy
prepare-deploy: quality test build ## üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é
	@echo "$(BLUE)üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é...$(NC)"
	@echo "$(GREEN)‚úÖ –ì–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é!$(NC)"

.PHONY: deploy-staging
deploy-staging: prepare-deploy ## üé≠ –î–µ–ø–ª–æ–π –Ω–∞ staging
	@echo "$(BLUE)üé≠ –î–µ–ø–ª–æ–π –Ω–∞ staging...$(NC)"
	./deploy.sh staging
	@echo "$(GREEN)‚úÖ Staging –æ–±–Ω–æ–≤–ª–µ–Ω$(NC)"

.PHONY: deploy-production
deploy-production: prepare-deploy ## üåü –î–µ–ø–ª–æ–π –Ω–∞ production
	@echo "$(RED)‚ö†Ô∏è PRODUCTION DEPLOY$(NC)"
	@read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å production? (y/N): " confirm; \
	if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
		./deploy.sh production; \
		echo "$(GREEN)‚úÖ Production –æ–±–Ω–æ–≤–ª–µ–Ω$(NC)"; \
	else \
		echo "$(YELLOW)‚ùå –î–µ–ø–ª–æ–π –æ—Ç–º–µ–Ω–µ–Ω$(NC)"; \
	fi

# ==================== –ú–û–ù–ò–¢–û–†–ò–ù–ì ====================
.PHONY: health
health: ## üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
	@echo "$(BLUE)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è...$(NC)"
	@curl -s http://localhost:8080/health | jq . || echo "$(RED)‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω$(NC)"

.PHONY: metrics
metrics: ## üìä –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏
	@echo "$(BLUE)üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞:$(NC)"
	@curl -s http://localhost:8080/metrics | jq . || echo "$(RED)‚ùå –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã$(NC)"

.PHONY: stats
stats: ## üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
	@echo "$(BLUE)üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:$(NC)"
	$(PYTHON) monitoring.py stats

.PHONY: monitor
monitor: ## üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
	@echo "$(BLUE)üëÅÔ∏è –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...$(NC)"
	@while true; do \
		clear; \
		echo "$(GREEN)ü§ñ Telegram Bot Monitor$(NC)"; \
		echo "$(YELLOW)‚è∞ $(shell date)$(NC)"; \
		echo ""; \
		make health 2>/dev/null; \
		echo ""; \
		make metrics 2>/dev/null; \
		sleep 30; \
	done

# ==================== –£–¢–ò–õ–ò–¢–´ ====================
.PHONY: clean
clean: ## üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
	@echo "$(BLUE)üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	find . -type f -name "*.log" -delete
	rm -rf .pytest_cache/
	rm -rf htmlcov/
	rm -rf .coverage
	rm -rf dist/
	rm -rf build/
	$(DOCKER) system prune -f
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–µ–∫—Ç –æ—á–∏—â–µ–Ω$(NC)"

.PHONY: clean-all
clean-all: clean ## üóëÔ∏è –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–≤–∫–ª—é—á–∞—è Docker)
	@echo "$(BLUE)üóëÔ∏è –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...$(NC)"
	$(DOCKER_COMPOSE) down -v --remove-orphans
	$(DOCKER) system prune -af --volumes
	@echo "$(GREEN)‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

.PHONY: update
update: ## üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	@echo "$(BLUE)üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	$(PIP) install --upgrade pip
	$(PIP) install -r $(REQUIREMENTS_FILE) --upgrade
	@echo "$(GREEN)‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

.PHONY: backup
backup: db-backup ## üíæ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø
	@echo "$(BLUE)üíæ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞...$(NC)"
	@mkdir -p backups
	tar -czf backups/full_backup_$(shell date +%Y%m%d_%H%M%S).tar.gz \
		--exclude='.git' \
		--exclude='__pycache__' \
		--exclude='venv' \
		--exclude='node_modules' \
		--exclude='*.log' \
		.
	@echo "$(GREEN)‚úÖ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω$(NC)"

.PHONY: check-env
check-env: ## ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	@echo "$(BLUE)‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(NC)"
	@if [ ! -f $(ENV_FILE) ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!$(NC)"; \
		echo "$(YELLOW)üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ: make setup$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ$(NC)"

.PHONY: info
info: ## ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
	@echo "$(BLUE)‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:$(NC)"
	@echo "  –ù–∞–∑–≤–∞–Ω–∏–µ: $(PROJECT_NAME)"
	@echo "  Python: $(shell $(PYTHON) --version)"
	@echo "  Docker: $(shell $(DOCKER) --version)"
	@echo "  –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
	@$(DOCKER_COMPOSE) ps 2>/dev/null || echo "    –°–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã"

# ==================== –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø ====================
.PHONY: docs
docs: ## üìö –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
	@echo "$(BLUE)üìö –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...$(NC)"
	@echo "$(YELLOW)üí° –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ README.md$(NC)"

.PHONY: docs-serve
docs-serve: ## üåê –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
	@echo "$(BLUE)üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...$(NC)"
	$(PYTHON) -m http.server 8000 --directory docs/

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º help
.DEFAULT_GOAL := help

# ==================== –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –¶–ï–õ–ò ====================
# –≠—Ç–∏ —Ü–µ–ª–∏ –Ω–µ —Å–æ–∑–¥–∞—é—Ç —Ñ–∞–π–ª—ã
.PHONY: all
all: setup quality test build ## üéØ –ü–æ–ª–Ω–∞—è —Å–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º
.PHONY: pre-commit
pre-commit: format lint test ## üîç –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º
	@echo "$(GREEN)‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∫–æ–º–º–∏—Ç—É!$(NC)"

# –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
.PHONY: check
check: format lint test-fast ## ‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
	@echo "$(GREEN)‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"
