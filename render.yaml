# ===========================================
# Упрощенный Render.com Blueprint
# Только PostgreSQL + Web Service
# ===========================================

services:
  # ==================== ОСНОВНОЕ ПРИЛОЖЕНИЕ ====================
  - type: web
    name: telegram-bot-web
    env: docker
    dockerfilePath: ./Dockerfile
    plan: free
    region: oregon
    buildCommand: ""
    startCommand: "python main.py"
    healthCheckPath: /health
    
    # Переменные окружения
    envVars:
      - key: ENVIRONMENT
        value: production
      
      - key: BOT_TOKEN
        sync: false  # Устанавливается вручную через UI
        
      - key: TARGET_CHAT_ID
        sync: false  # Устанавливается вручную
        
      - key: MODERATION_CHAT_ID
        sync: false  # Опционально
        
      - key: GROUP_LINK
        value: https://t.me/your_group
        
      - key: EXAMPLE_URL
        value: https://example.com
        
      - key: WEBHOOK_HOST
        fromService:
          type: web
          name: telegram-bot-web
          property: host
          
      - key: PORT
        value: "8080"
        
      - key: DATABASE_URL
        fromDatabase:
          name: telegram-bot-db
          property: connectionString
    
    # Автодеплой из GitHub
    autoDeploy: true
    
    # ==================== БАЗА ДАННЫХ ====================
  - type: pserv
    name: telegram-bot-db
    env: docker
    plan: free
    region: oregon
    
    # Переменные для PostgreSQL
    envVars:
      - key: POSTGRES_DB
        value: telegram_bot
        
      - key: POSTGRES_USER
        generateValue: true  # Автогенерация
        
      - key: POSTGRES_PASSWORD
        generateValue: true  # Автогенерация
    
    # Persistent диск для данных
    disk:
      name: postgres-data
      mountPath: /var/lib/postgresql/data
      sizeGB: 1  # Бесплатный план
    
    # Инициализация БД
    buildCommand: |
      echo "PostgreSQL готов к работе"
